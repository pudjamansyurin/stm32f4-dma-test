
vt-throughput-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003614  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800396c  0800396c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003974  08003974  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003974  08003974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800397c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a28  20000010  0800398c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  0800398c  00020a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092d1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002039  00000000  00000000  00029311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  0002ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002135f  00000000  00000000  0002c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b225  00000000  00000000  0004d3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5a4e  00000000  00000000  0005860c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011e05a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001968  00000000  00000000  0011e0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080037c0 	.word	0x080037c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080037c0 	.word	0x080037c0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <TS_DMA_Init>:
static void _TransferComplete(DMA_HandleTypeDef *hdma);
static void _TransferError(DMA_HandleTypeDef *hdma);

/* Public function definitions */
void TS_DMA_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  HAL_DMA_RegisterCallback(hdma, HAL_DMA_XFER_CPLT_CB_ID, _TransferComplete);
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <TS_DMA_Init+0x24>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <TS_DMA_Init+0x28>)
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f001 fbc7 	bl	8001c9c <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(hdma, HAL_DMA_XFER_ERROR_CB_ID, _TransferError);
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <TS_DMA_Init+0x24>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <TS_DMA_Init+0x2c>)
 8000514:	2104      	movs	r1, #4
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fbc0 	bl	8001c9c <HAL_DMA_RegisterCallback>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000000 	.word	0x20000000
 8000524:	080008e1 	.word	0x080008e1
 8000528:	08000901 	.word	0x08000901

0800052c <TS_DMA_Transfer>:

void TS_DMA_Transfer(void *DstAddr, void *SrcAddr, uint16_t Size)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	4613      	mov	r3, r2
 8000538:	80fb      	strh	r3, [r7, #6]
  /* Start */
  HAL_DMA_Start_IT(hdma, (uint32_t) SrcAddr, (uint32_t) DstAddr, Size);
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <TS_DMA_Transfer+0x38>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	68b9      	ldr	r1, [r7, #8]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	f001 f9ba 	bl	80018bc <HAL_DMA_Start_IT>
  while (!transferComplete && !transferError);
 8000548:	bf00      	nop
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <TS_DMA_Transfer+0x3c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d103      	bne.n	800055a <TS_DMA_Transfer+0x2e>
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <TS_DMA_Transfer+0x40>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f7      	beq.n	800054a <TS_DMA_Transfer+0x1e>
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	20000030 	.word	0x20000030
 800056c:	2000002c 	.word	0x2000002c

08000570 <TS_DMA_ResetFlags>:

void TS_DMA_ResetFlags(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  transferComplete = 0;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <TS_DMA_ResetFlags+0x1c>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
  transferError = 0;
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <TS_DMA_ResetFlags+0x20>)
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000030 	.word	0x20000030
 8000590:	2000002c 	.word	0x2000002c

08000594 <TS_DMA_byte>:

void TS_DMA_byte(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <TS_DMA_byte+0x2c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <TS_DMA_byte+0x2c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <TS_DMA_byte+0x2c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DMA_Init(hdma);
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <TS_DMA_byte+0x2c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 ff65 	bl	8001484 <HAL_DMA_Init>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000

080005c4 <TS_DMA_halfword>:

void TS_DMA_halfword(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <TS_DMA_halfword+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005d0:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <TS_DMA_halfword+0x30>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005da:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <TS_DMA_halfword+0x30>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2200      	movs	r2, #0
 80005e2:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DMA_Init(hdma);
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <TS_DMA_halfword+0x30>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 ff4b 	bl	8001484 <HAL_DMA_Init>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000

080005f8 <TS_DMA_word>:

void TS_DMA_word(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <TS_DMA_word+0x30>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000604:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <TS_DMA_word+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800060e:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <TS_DMA_word+0x30>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DMA_Init(hdma);
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <TS_DMA_word+0x30>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 ff31 	bl	8001484 <HAL_DMA_Init>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000

0800062c <TS_DMA_byte_fifo>:

void TS_DMA_byte_fifo(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2204      	movs	r2, #4
 8000646:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2203      	movs	r2, #3
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_SINGLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 ff0d 	bl	8001484 <HAL_DMA_Init>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000

08000674 <TS_DMA_halfword_fifo>:

void TS_DMA_halfword_fifo(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000680:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800068a:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2204      	movs	r2, #4
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2203      	movs	r2, #3
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_SINGLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_PBURST_SINGLE;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fee7 	bl	8001484 <HAL_DMA_Init>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000

080006c0 <TS_DMA_word_fifo>:

void TS_DMA_word_fifo(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006cc:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006d6:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2204      	movs	r2, #4
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2203      	movs	r2, #3
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_SINGLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_PBURST_SINGLE;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fec1 	bl	8001484 <HAL_DMA_Init>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000

0800070c <TS_DMA_byte_fifo_inc4>:

void TS_DMA_byte_fifo_inc4(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2204      	movs	r2, #4
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2203      	movs	r2, #3
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC4;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC4;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fe9b 	bl	8001484 <HAL_DMA_Init>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000000 	.word	0x20000000

08000758 <TS_DMA_byte_fifo_inc8>:

void TS_DMA_byte_fifo_inc8(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2204      	movs	r2, #4
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2203      	movs	r2, #3
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC8;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC8;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fe75 	bl	8001484 <HAL_DMA_Init>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000000 	.word	0x20000000

080007a4 <TS_DMA_byte_fifo_inc16>:

void TS_DMA_byte_fifo_inc16(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2204      	movs	r2, #4
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2203      	movs	r2, #3
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC16;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC16;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fe4f 	bl	8001484 <HAL_DMA_Init>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000

080007f0 <TS_DMA_halfword_fifo_inc4>:

void TS_DMA_halfword_fifo_inc4(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007fc:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000806:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2204      	movs	r2, #4
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2203      	movs	r2, #3
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC4;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC4;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fe27 	bl	8001484 <HAL_DMA_Init>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000000 	.word	0x20000000

08000840 <TS_DMA_halfword_fifo_inc8>:

void TS_DMA_halfword_fifo_inc8(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800084c:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000856:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2204      	movs	r2, #4
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2203      	movs	r2, #3
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC8;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC8;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fdff 	bl	8001484 <HAL_DMA_Init>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000

08000890 <TS_DMA_word_fifo_inc4>:

void TS_DMA_word_fifo_inc4(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a6:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2204      	movs	r2, #4
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2203      	movs	r2, #3
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC4;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC4;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fdd7 	bl	8001484 <HAL_DMA_Init>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000

080008e0 <_TransferComplete>:

/* DMA Interrupt Callbacks */
static void _TransferComplete(DMA_HandleTypeDef *hdma)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  transferComplete = 1;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <_TransferComplete+0x1c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000030 	.word	0x20000030

08000900 <_TransferError>:

static void _TransferError(DMA_HandleTypeDef *hdma)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  transferError = 1;
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <_TransferError+0x1c>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	2000002c 	.word	0x2000002c

08000920 <DWT_Init>:

#include "stm32f4xx_hal.h"

/* Public function declarations & definitions */
__STATIC_INLINE void DWT_Init(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <DWT_Init+0x2c>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <DWT_Init+0x2c>)
 800092a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092e:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <DWT_Init+0x30>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <DWT_Init+0x30>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <DWT_Init+0x30>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6013      	str	r3, [r2, #0]
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000edf0 	.word	0xe000edf0
 8000950:	e0001000 	.word	0xe0001000

08000954 <DWT_DeInit>:

__STATIC_INLINE void DWT_DeInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <DWT_DeInit+0x2c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <DWT_DeInit+0x2c>)
 800095e:	f023 0301 	bic.w	r3, r3, #1
 8000962:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <DWT_DeInit+0x2c>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <DWT_DeInit+0x30>)
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <DWT_DeInit+0x30>)
 8000970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000974:	60d3      	str	r3, [r2, #12]
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e0001000 	.word	0xe0001000
 8000984:	e000edf0 	.word	0xe000edf0

08000988 <DWT_GetCounter>:
  DWT_DeInit();
  DWT_Init();
}

__STATIC_INLINE uint32_t DWT_GetCounter(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <DWT_GetCounter+0x14>)
 800098e:	685b      	ldr	r3, [r3, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e0001000 	.word	0xe0001000

080009a0 <Throughput_Init>:
                                           void *SrcAddr,
                                           uint16_t Size);

/* Public function definitions */
HAL_StatusTypeDef Throughput_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  TS_DMA_Init();
 80009a4:	f7ff fdaa 	bl	80004fc <TS_DMA_Init>

  /* Initiate testers */
  _register_tester(TEST_MEMCPY, _memcpy_transfer, NULL);
 80009a8:	2200      	movs	r2, #0
 80009aa:	4921      	ldr	r1, [pc, #132]	; (8000a30 <Throughput_Init+0x90>)
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 f971 	bl	8000c94 <_register_tester>

  _register_tester(TEST_DMA_BYTE, TS_DMA_Transfer, TS_DMA_byte);
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <Throughput_Init+0x94>)
 80009b4:	4920      	ldr	r1, [pc, #128]	; (8000a38 <Throughput_Init+0x98>)
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 f96c 	bl	8000c94 <_register_tester>
  _register_tester(TEST_DMA_HALFWORD, TS_DMA_Transfer, TS_DMA_halfword);
 80009bc:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <Throughput_Init+0x9c>)
 80009be:	491e      	ldr	r1, [pc, #120]	; (8000a38 <Throughput_Init+0x98>)
 80009c0:	2002      	movs	r0, #2
 80009c2:	f000 f967 	bl	8000c94 <_register_tester>
  _register_tester(TEST_DMA_WORD, TS_DMA_Transfer, TS_DMA_word);
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <Throughput_Init+0xa0>)
 80009c8:	491b      	ldr	r1, [pc, #108]	; (8000a38 <Throughput_Init+0x98>)
 80009ca:	2003      	movs	r0, #3
 80009cc:	f000 f962 	bl	8000c94 <_register_tester>

  _register_tester(TEST_DMA_BYTE_FIFO, TS_DMA_Transfer, TS_DMA_byte_fifo);
 80009d0:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <Throughput_Init+0xa4>)
 80009d2:	4919      	ldr	r1, [pc, #100]	; (8000a38 <Throughput_Init+0x98>)
 80009d4:	2004      	movs	r0, #4
 80009d6:	f000 f95d 	bl	8000c94 <_register_tester>
  _register_tester(TEST_DMA_HALFWORD_FIFO,
 80009da:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <Throughput_Init+0xa8>)
 80009dc:	4916      	ldr	r1, [pc, #88]	; (8000a38 <Throughput_Init+0x98>)
 80009de:	2005      	movs	r0, #5
 80009e0:	f000 f958 	bl	8000c94 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_halfword_fifo);
  _register_tester(TEST_DMA_WORD_FIFO, TS_DMA_Transfer, TS_DMA_word_fifo);
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <Throughput_Init+0xac>)
 80009e6:	4914      	ldr	r1, [pc, #80]	; (8000a38 <Throughput_Init+0x98>)
 80009e8:	2006      	movs	r0, #6
 80009ea:	f000 f953 	bl	8000c94 <_register_tester>

  _register_tester(TEST_DMA_BYTE_FIFO_INC4,
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <Throughput_Init+0xb0>)
 80009f0:	4911      	ldr	r1, [pc, #68]	; (8000a38 <Throughput_Init+0x98>)
 80009f2:	2007      	movs	r0, #7
 80009f4:	f000 f94e 	bl	8000c94 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_byte_fifo_inc4);
  _register_tester(TEST_DMA_BYTE_FIFO_INC8,
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <Throughput_Init+0xb4>)
 80009fa:	490f      	ldr	r1, [pc, #60]	; (8000a38 <Throughput_Init+0x98>)
 80009fc:	2008      	movs	r0, #8
 80009fe:	f000 f949 	bl	8000c94 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_byte_fifo_inc8);
  _register_tester(TEST_DMA_BYTE_FIFO_INC16,
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <Throughput_Init+0xb8>)
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <Throughput_Init+0x98>)
 8000a06:	2009      	movs	r0, #9
 8000a08:	f000 f944 	bl	8000c94 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_byte_fifo_inc16);

  _register_tester(TEST_DMA_HALFWORD_FIFO_INC4,
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <Throughput_Init+0xbc>)
 8000a0e:	490a      	ldr	r1, [pc, #40]	; (8000a38 <Throughput_Init+0x98>)
 8000a10:	200a      	movs	r0, #10
 8000a12:	f000 f93f 	bl	8000c94 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_halfword_fifo_inc4);
  _register_tester(TEST_DMA_HALFWORD_FIFO_INC8,
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <Throughput_Init+0xc0>)
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <Throughput_Init+0x98>)
 8000a1a:	200b      	movs	r0, #11
 8000a1c:	f000 f93a 	bl	8000c94 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_halfword_fifo_inc8);

  _register_tester(TEST_DMA_WORD_FIFO_INC4,
 8000a20:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <Throughput_Init+0xc4>)
 8000a22:	4905      	ldr	r1, [pc, #20]	; (8000a38 <Throughput_Init+0x98>)
 8000a24:	200c      	movs	r0, #12
 8000a26:	f000 f935 	bl	8000c94 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_word_fifo_inc4);

  return (HAL_OK);
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08000cd5 	.word	0x08000cd5
 8000a34:	08000595 	.word	0x08000595
 8000a38:	0800052d 	.word	0x0800052d
 8000a3c:	080005c5 	.word	0x080005c5
 8000a40:	080005f9 	.word	0x080005f9
 8000a44:	0800062d 	.word	0x0800062d
 8000a48:	08000675 	.word	0x08000675
 8000a4c:	080006c1 	.word	0x080006c1
 8000a50:	0800070d 	.word	0x0800070d
 8000a54:	08000759 	.word	0x08000759
 8000a58:	080007a5 	.word	0x080007a5
 8000a5c:	080007f1 	.word	0x080007f1
 8000a60:	08000841 	.word	0x08000841
 8000a64:	08000891 	.word	0x08000891

08000a68 <Throughput_Test>:

HAL_StatusTypeDef Throughput_Test(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  struct Tester *ts;
  uint16_t i, j;

  for (i = 0; i < TEST_CNT; i++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	80fb      	strh	r3, [r7, #6]
 8000a72:	e03a      	b.n	8000aea <Throughput_Test+0x82>
    ts = &Testers[i];
 8000a74:	88fa      	ldrh	r2, [r7, #6]
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <Throughput_Test+0x94>)
 8000a80:	4413      	add	r3, r2
 8000a82:	603b      	str	r3, [r7, #0]

    /* Skip if un-registered */
    if (ts->transfer == NULL) {
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d02a      	beq.n	8000ae2 <Throughput_Test+0x7a>
      continue;
    }

    /* Configure tester */
    if (ts->configure != NULL) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <Throughput_Test+0x32>
      ts->configure();
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a98:	4798      	blx	r3
    }

    /* Test routines */
    _flush(ts);
 8000a9a:	6838      	ldr	r0, [r7, #0]
 8000a9c:	f000 f8d2 	bl	8000c44 <_flush>
    for (j = 0; j < ITERATION_CNT; j++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	80bb      	strh	r3, [r7, #4]
 8000aa4:	e005      	b.n	8000ab2 <Throughput_Test+0x4a>
      _test(ts);
 8000aa6:	6838      	ldr	r0, [r7, #0]
 8000aa8:	f000 f82c 	bl	8000b04 <_test>
    for (j = 0; j < ITERATION_CNT; j++) {
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	80bb      	strh	r3, [r7, #4]
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d9f4      	bls.n	8000aa6 <Throughput_Test+0x3e>
    }
    _calculate(ts);
 8000abc:	6838      	ldr	r0, [r7, #0]
 8000abe:	f000 f869 	bl	8000b94 <_calculate>

    /* Indicators */
    LED_Write(&hled, 1);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	480e      	ldr	r0, [pc, #56]	; (8000b00 <Throughput_Test+0x98>)
 8000ac6:	f002 fe05 	bl	80036d4 <LED_Write>
    HAL_Delay(500);
 8000aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ace:	f000 fb75 	bl	80011bc <HAL_Delay>
    LED_Write(&hled, 0);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <Throughput_Test+0x98>)
 8000ad6:	f002 fdfd 	bl	80036d4 <LED_Write>
    HAL_Delay(50);
 8000ada:	2032      	movs	r0, #50	; 0x32
 8000adc:	f000 fb6e 	bl	80011bc <HAL_Delay>
 8000ae0:	e000      	b.n	8000ae4 <Throughput_Test+0x7c>
      continue;
 8000ae2:	bf00      	nop
  for (i = 0; i < TEST_CNT; i++) {
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	2b0c      	cmp	r3, #12
 8000aee:	d9c1      	bls.n	8000a74 <Throughput_Test+0xc>
  }

  return (HAL_OK);
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000038 	.word	0x20000038
 8000b00:	20000a14 	.word	0x20000a14

08000b04 <_test>:

/* Private function definitions */
static HAL_StatusTypeDef _test(struct Tester *ts)
{
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t cycles;

  /* Prepare data */
  memset(SRAM1_ADDR, 0x55, BUF_SIZE);
 8000b0c:	f240 720a 	movw	r2, #1802	; 0x70a
 8000b10:	2155      	movs	r1, #85	; 0x55
 8000b12:	481e      	ldr	r0, [pc, #120]	; (8000b8c <_test+0x88>)
 8000b14:	f002 fe4c 	bl	80037b0 <memset>
  memset(SRAM2_ADDR, 0x00, BUF_SIZE);
 8000b18:	f240 720a 	movw	r2, #1802	; 0x70a
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	481c      	ldr	r0, [pc, #112]	; (8000b90 <_test+0x8c>)
 8000b20:	f002 fe46 	bl	80037b0 <memset>

  TS_DMA_ResetFlags();
 8000b24:	f7ff fd24 	bl	8000570 <TS_DMA_ResetFlags>

  /* Transfer data */
  DWT_Init();
 8000b28:	f7ff fefa 	bl	8000920 <DWT_Init>
  ts->transfer(SRAM2_ADDR, SRAM1_ADDR, BUF_SIZE);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	f240 720a 	movw	r2, #1802	; 0x70a
 8000b34:	4915      	ldr	r1, [pc, #84]	; (8000b8c <_test+0x88>)
 8000b36:	4816      	ldr	r0, [pc, #88]	; (8000b90 <_test+0x8c>)
 8000b38:	4798      	blx	r3
  cycles = DWT_GetCounter();
 8000b3a:	f7ff ff25 	bl	8000988 <DWT_GetCounter>
 8000b3e:	60f8      	str	r0, [r7, #12]
  DWT_DeInit();
 8000b40:	f7ff ff08 	bl	8000954 <DWT_DeInit>

  /* Compare data */
  if (memcmp(SRAM1_ADDR, SRAM2_ADDR, BUF_SIZE) == 0) {
 8000b44:	f240 720a 	movw	r2, #1802	; 0x70a
 8000b48:	4911      	ldr	r1, [pc, #68]	; (8000b90 <_test+0x8c>)
 8000b4a:	4810      	ldr	r0, [pc, #64]	; (8000b8c <_test+0x88>)
 8000b4c:	f002 fe14 	bl	8003778 <memcmp>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d114      	bne.n	8000b80 <_test+0x7c>
    ts->cycle_total += cycles;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	1884      	adds	r4, r0, r2
 8000b66:	eb41 0503 	adc.w	r5, r1, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	e9c3 4502 	strd	r4, r5, [r3, #8]
    ts->iteration++;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	801a      	strh	r2, [r3, #0]

    return (HAL_OK);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e000      	b.n	8000b82 <_test+0x7e>
  }
  return (HAL_ERROR);
 8000b80:	2301      	movs	r3, #1
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200002a8 	.word	0x200002a8
 8000b90:	2001c000 	.word	0x2001c000

08000b94 <_calculate>:

static inline void _calculate(struct Tester *ts)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t core_clock = HAL_RCC_GetHCLKFreq();
 8000b9c:	f001 fefe 	bl	800299c <HAL_RCC_GetHCLKFreq>
 8000ba0:	60f8      	str	r0, [r7, #12]

  ts->cycles = ts->cycle_total / ts->iteration;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	f04f 0300 	mov.w	r3, #0
 8000bb2:	f7ff fb27 	bl	8000204 <__aeabi_uldivmod>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	611a      	str	r2, [r3, #16]
  ts->duration_us = (float) ts->cycles / (core_clock / 1000000);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <_calculate+0xa4>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	0c9b      	lsrs	r3, r3, #18
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	edc3 7a05 	vstr	s15, [r3, #20]
  ts->kfps = 1000.0f / ts->duration_us;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	ed93 7a05 	vldr	s14, [r3, #20]
 8000bec:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000c3c <_calculate+0xa8>
 8000bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	edc3 7a06 	vstr	s15, [r3, #24]
  ts->byte_cycles = (float) ts->cycles / BUF_SIZE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	ee07 3a90 	vmov	s15, r3
 8000c02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c06:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000c40 <_calculate+0xac>
 8000c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	edc3 7a07 	vstr	s15, [r3, #28]
  ts->byte_duration_ns = ts->duration_us * 1000.0f / BUF_SIZE;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c1a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000c3c <_calculate+0xa8>
 8000c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c22:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000c40 <_calculate+0xac>
 8000c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	431bde83 	.word	0x431bde83
 8000c3c:	447a0000 	.word	0x447a0000
 8000c40:	44e14000 	.word	0x44e14000

08000c44 <_flush>:

static inline void _flush(struct Tester *ts)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  ts->iteration = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	801a      	strh	r2, [r3, #0]
  ts->cycle_total = 0;
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ts->cycles = 0;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  ts->duration_us = 0.0f;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  ts->kfps = 0.0f;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  ts->byte_cycles = 0.0f;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  ts->byte_duration_ns = 0.0f;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f04f 0200 	mov.w	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <_register_tester>:

static struct Tester* _register_tester(enum TEST_NAME ts_name,
                                       void (*transfer)(void*, void*, uint16_t),
                                       void (*configure)(void))
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	73fb      	strb	r3, [r7, #15]
  struct Tester *ts = &Testers[ts_name];
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <_register_tester+0x3c>)
 8000cae:	4413      	add	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]

  _flush(ts);
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ffc6 	bl	8000c44 <_flush>
  ts->transfer = transfer;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
  ts->configure = configure;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24

  return (ts);
 8000cc4:	697b      	ldr	r3, [r7, #20]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000038 	.word	0x20000038

08000cd4 <_memcpy_transfer>:

__STATIC_FORCEINLINE void _memcpy_transfer(void *DstAddr,
                                           void *SrcAddr,
                                           uint16_t Size)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	80fb      	strh	r3, [r7, #6]
  memcpy(DstAddr, SrcAddr, Size);
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f002 fd53 	bl	8003794 <memcpy>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_DMA_Init+0x9c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <MX_DMA_Init+0x9c>)
 8000d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_DMA_Init+0x9c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d1c:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <MX_DMA_Init+0xa4>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d32:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000d6c:	480a      	ldr	r0, [pc, #40]	; (8000d98 <MX_DMA_Init+0xa0>)
 8000d6e:	f000 fb89 	bl	8001484 <HAL_DMA_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_DMA_Init+0x84>
  {
    Error_Handler();
 8000d78:	f000 f906 	bl	8000f88 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2038      	movs	r0, #56	; 0x38
 8000d82:	f000 fb2f 	bl	80013e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d86:	2038      	movs	r0, #56	; 0x38
 8000d88:	f000 fb58 	bl	800143c <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	200009b4 	.word	0x200009b4
 8000d9c:	40026410 	.word	0x40026410

08000da0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <MX_GPIO_Init+0xb0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e26:	230c      	movs	r3, #12
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e36:	2307      	movs	r3, #7
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_GPIO_Init+0xb4>)
 8000e42:	f001 f85f 	bl	8001f04 <HAL_GPIO_Init>

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f000 f93c 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f820 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f7ff ff9c 	bl	8000da0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e68:	f7ff ff46 	bl	8000cf8 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  LED_Init(&hled, GPIOA, 5);
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	490b      	ldr	r1, [pc, #44]	; (8000e9c <main+0x44>)
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <main+0x48>)
 8000e72:	f002 fb87 	bl	8003584 <LED_Init>
  Throughput_Init();
 8000e76:	f7ff fd93 	bl	80009a0 <Throughput_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Throughput_Test();
 8000e7a:	f7ff fdf5 	bl	8000a68 <Throughput_Test>

  while (1) {
    LED_Write(&hled, 1);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <main+0x48>)
 8000e82:	f002 fc27 	bl	80036d4 <LED_Write>
    HAL_Delay(50);
 8000e86:	2032      	movs	r0, #50	; 0x32
 8000e88:	f000 f998 	bl	80011bc <HAL_Delay>
    LED_Write(&hled, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <main+0x48>)
 8000e90:	f002 fc20 	bl	80036d4 <LED_Write>
    HAL_Delay(50);
 8000e94:	2032      	movs	r0, #50	; 0x32
 8000e96:	f000 f991 	bl	80011bc <HAL_Delay>
    LED_Write(&hled, 1);
 8000e9a:	e7f0      	b.n	8000e7e <main+0x26>
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	20000a14 	.word	0x20000a14

08000ea4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2234      	movs	r2, #52	; 0x34
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fc7c 	bl	80037b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <SystemClock_Config+0xdc>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <SystemClock_Config+0xdc>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <SystemClock_Config+0xdc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <SystemClock_Config+0xe0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <SystemClock_Config+0xe0>)
 8000eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <SystemClock_Config+0xe0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f14:	2304      	movs	r3, #4
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f18:	23b4      	movs	r3, #180	; 0xb4
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fef3 	bl	8002d18 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x98>
    Error_Handler();
 8000f38:	f000 f826 	bl	8000f88 <Error_Handler>
  }
  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000f3c:	f001 fb38 	bl	80025b0 <HAL_PWREx_EnableOverDrive>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xa6>
    Error_Handler();
 8000f46:	f000 f81f 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	60bb      	str	r3, [r7, #8]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2105      	movs	r1, #5
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 fb71 	bl	8002650 <HAL_RCC_ClockConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0xd4>
    Error_Handler();
 8000f74:	f000 f808 	bl	8000f88 <Error_Handler>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3750      	adds	r7, #80	; 0x50
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000

08000f88 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>

08000f92 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fe6:	2007      	movs	r0, #7
 8000fe8:	f000 f9dc 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f89a 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <DMA2_Stream0_IRQHandler+0x10>)
 8001052:	f000 fc99 	bl	8001988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200009b4 	.word	0x200009b4

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a0:	4c0b      	ldr	r4, [pc, #44]	; (80010d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ae:	f7ff ffd7 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f002 fb3d 	bl	8003730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fecf 	bl	8000e58 <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010c8:	0800397c 	.word	0x0800397c
  ldr r2, =_sbss
 80010cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010d0:	20000a38 	.word	0x20000a38

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_Init+0x40>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_Init+0x40>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x40>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f94f 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff ff4c 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f996 	bl	800146c <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f944 	bl	80013e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000004 	.word	0x20000004
 8001174:	2000000c 	.word	0x2000000c
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	20000a34 	.word	0x20000a34

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000a34 	.word	0x20000a34

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000000c 	.word	0x2000000c

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	d00f      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d00c      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d009      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d006      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d003      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013ca:	2192      	movs	r1, #146	; 0x92
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80013ce:	f7ff fde0 	bl	8000f92 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff16 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	080037d8 	.word	0x080037d8

080013e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d903      	bls.n	8001404 <HAL_NVIC_SetPriority+0x20>
 80013fc:	21aa      	movs	r1, #170	; 0xaa
 80013fe:	480e      	ldr	r0, [pc, #56]	; (8001438 <HAL_NVIC_SetPriority+0x54>)
 8001400:	f7ff fdc7 	bl	8000f92 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	d903      	bls.n	8001412 <HAL_NVIC_SetPriority+0x2e>
 800140a:	21ab      	movs	r1, #171	; 0xab
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <HAL_NVIC_SetPriority+0x54>)
 800140e:	f7ff fdc0 	bl	8000f92 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001412:	f7ff ff1b 	bl	800124c <__NVIC_GetPriorityGrouping>
 8001416:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f7ff ff6b 	bl	80012f8 <NVIC_EncodePriority>
 8001422:	4602      	mov	r2, r0
 8001424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff3a 	bl	80012a4 <__NVIC_SetPriority>
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	080037d8 	.word	0x080037d8

0800143c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	da03      	bge.n	8001456 <HAL_NVIC_EnableIRQ+0x1a>
 800144e:	21be      	movs	r1, #190	; 0xbe
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_NVIC_EnableIRQ+0x2c>)
 8001452:	f7ff fd9e 	bl	8000f92 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff04 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	080037d8 	.word	0x080037d8

0800146c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff73 	bl	8001360 <SysTick_Config>
 800147a:	4603      	mov	r3, r0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff fe88 	bl	80011a4 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e204      	b.n	80018aa <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a97      	ldr	r2, [pc, #604]	; (8001704 <HAL_DMA_Init+0x280>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d04e      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a96      	ldr	r2, [pc, #600]	; (8001708 <HAL_DMA_Init+0x284>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d049      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a94      	ldr	r2, [pc, #592]	; (800170c <HAL_DMA_Init+0x288>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d044      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a93      	ldr	r2, [pc, #588]	; (8001710 <HAL_DMA_Init+0x28c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d03f      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a91      	ldr	r2, [pc, #580]	; (8001714 <HAL_DMA_Init+0x290>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d03a      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a90      	ldr	r2, [pc, #576]	; (8001718 <HAL_DMA_Init+0x294>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d035      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a8e      	ldr	r2, [pc, #568]	; (800171c <HAL_DMA_Init+0x298>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d030      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a8d      	ldr	r2, [pc, #564]	; (8001720 <HAL_DMA_Init+0x29c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d02b      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a8b      	ldr	r2, [pc, #556]	; (8001724 <HAL_DMA_Init+0x2a0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d026      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a8a      	ldr	r2, [pc, #552]	; (8001728 <HAL_DMA_Init+0x2a4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d021      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a88      	ldr	r2, [pc, #544]	; (800172c <HAL_DMA_Init+0x2a8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01c      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a87      	ldr	r2, [pc, #540]	; (8001730 <HAL_DMA_Init+0x2ac>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d017      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a85      	ldr	r2, [pc, #532]	; (8001734 <HAL_DMA_Init+0x2b0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d012      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a84      	ldr	r2, [pc, #528]	; (8001738 <HAL_DMA_Init+0x2b4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00d      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a82      	ldr	r2, [pc, #520]	; (800173c <HAL_DMA_Init+0x2b8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d008      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a81      	ldr	r2, [pc, #516]	; (8001740 <HAL_DMA_Init+0x2bc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d003      	beq.n	8001548 <HAL_DMA_Init+0xc4>
 8001540:	21b8      	movs	r1, #184	; 0xb8
 8001542:	4880      	ldr	r0, [pc, #512]	; (8001744 <HAL_DMA_Init+0x2c0>)
 8001544:	f7ff fd25 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d026      	beq.n	800159e <HAL_DMA_Init+0x11a>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001558:	d021      	beq.n	800159e <HAL_DMA_Init+0x11a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001562:	d01c      	beq.n	800159e <HAL_DMA_Init+0x11a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800156c:	d017      	beq.n	800159e <HAL_DMA_Init+0x11a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001576:	d012      	beq.n	800159e <HAL_DMA_Init+0x11a>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001580:	d00d      	beq.n	800159e <HAL_DMA_Init+0x11a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800158a:	d008      	beq.n	800159e <HAL_DMA_Init+0x11a>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001594:	d003      	beq.n	800159e <HAL_DMA_Init+0x11a>
 8001596:	21b9      	movs	r1, #185	; 0xb9
 8001598:	486a      	ldr	r0, [pc, #424]	; (8001744 <HAL_DMA_Init+0x2c0>)
 800159a:	f7ff fcfa 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_DMA_Init+0x13a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b40      	cmp	r3, #64	; 0x40
 80015ac:	d007      	beq.n	80015be <HAL_DMA_Init+0x13a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b80      	cmp	r3, #128	; 0x80
 80015b4:	d003      	beq.n	80015be <HAL_DMA_Init+0x13a>
 80015b6:	21ba      	movs	r1, #186	; 0xba
 80015b8:	4862      	ldr	r0, [pc, #392]	; (8001744 <HAL_DMA_Init+0x2c0>)
 80015ba:	f7ff fcea 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c6:	d007      	beq.n	80015d8 <HAL_DMA_Init+0x154>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_DMA_Init+0x154>
 80015d0:	21bb      	movs	r1, #187	; 0xbb
 80015d2:	485c      	ldr	r0, [pc, #368]	; (8001744 <HAL_DMA_Init+0x2c0>)
 80015d4:	f7ff fcdd 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e0:	d007      	beq.n	80015f2 <HAL_DMA_Init+0x16e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_DMA_Init+0x16e>
 80015ea:	21bc      	movs	r1, #188	; 0xbc
 80015ec:	4855      	ldr	r0, [pc, #340]	; (8001744 <HAL_DMA_Init+0x2c0>)
 80015ee:	f7ff fcd0 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00d      	beq.n	8001616 <HAL_DMA_Init+0x192>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001602:	d008      	beq.n	8001616 <HAL_DMA_Init+0x192>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800160c:	d003      	beq.n	8001616 <HAL_DMA_Init+0x192>
 800160e:	21bd      	movs	r1, #189	; 0xbd
 8001610:	484c      	ldr	r0, [pc, #304]	; (8001744 <HAL_DMA_Init+0x2c0>)
 8001612:	f7ff fcbe 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00d      	beq.n	800163a <HAL_DMA_Init+0x1b6>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001626:	d008      	beq.n	800163a <HAL_DMA_Init+0x1b6>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001630:	d003      	beq.n	800163a <HAL_DMA_Init+0x1b6>
 8001632:	21be      	movs	r1, #190	; 0xbe
 8001634:	4843      	ldr	r0, [pc, #268]	; (8001744 <HAL_DMA_Init+0x2c0>)
 8001636:	f7ff fcac 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <HAL_DMA_Init+0x1d8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164a:	d007      	beq.n	800165c <HAL_DMA_Init+0x1d8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b20      	cmp	r3, #32
 8001652:	d003      	beq.n	800165c <HAL_DMA_Init+0x1d8>
 8001654:	21bf      	movs	r1, #191	; 0xbf
 8001656:	483b      	ldr	r0, [pc, #236]	; (8001744 <HAL_DMA_Init+0x2c0>)
 8001658:	f7ff fc9b 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d012      	beq.n	800168a <HAL_DMA_Init+0x206>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d00d      	beq.n	800168a <HAL_DMA_Init+0x206>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001676:	d008      	beq.n	800168a <HAL_DMA_Init+0x206>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001680:	d003      	beq.n	800168a <HAL_DMA_Init+0x206>
 8001682:	21c0      	movs	r1, #192	; 0xc0
 8001684:	482f      	ldr	r0, [pc, #188]	; (8001744 <HAL_DMA_Init+0x2c0>)
 8001686:	f7ff fc84 	bl	8000f92 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <HAL_DMA_Init+0x21e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	2b04      	cmp	r3, #4
 8001698:	d003      	beq.n	80016a2 <HAL_DMA_Init+0x21e>
 800169a:	21c1      	movs	r1, #193	; 0xc1
 800169c:	4829      	ldr	r0, [pc, #164]	; (8001744 <HAL_DMA_Init+0x2c0>)
 800169e:	f7ff fc78 	bl	8000f92 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d065      	beq.n	8001776 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00f      	beq.n	80016d2 <HAL_DMA_Init+0x24e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d00b      	beq.n	80016d2 <HAL_DMA_Init+0x24e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d007      	beq.n	80016d2 <HAL_DMA_Init+0x24e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d003      	beq.n	80016d2 <HAL_DMA_Init+0x24e>
 80016ca:	21c6      	movs	r1, #198	; 0xc6
 80016cc:	481d      	ldr	r0, [pc, #116]	; (8001744 <HAL_DMA_Init+0x2c0>)
 80016ce:	f7ff fc60 	bl	8000f92 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d036      	beq.n	8001748 <HAL_DMA_Init+0x2c4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016e2:	d031      	beq.n	8001748 <HAL_DMA_Init+0x2c4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d02c      	beq.n	8001748 <HAL_DMA_Init+0x2c4>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f6:	d027      	beq.n	8001748 <HAL_DMA_Init+0x2c4>
 80016f8:	21c7      	movs	r1, #199	; 0xc7
 80016fa:	4812      	ldr	r0, [pc, #72]	; (8001744 <HAL_DMA_Init+0x2c0>)
 80016fc:	f7ff fc49 	bl	8000f92 <assert_failed>
 8001700:	e022      	b.n	8001748 <HAL_DMA_Init+0x2c4>
 8001702:	bf00      	nop
 8001704:	40026010 	.word	0x40026010
 8001708:	40026028 	.word	0x40026028
 800170c:	40026040 	.word	0x40026040
 8001710:	40026058 	.word	0x40026058
 8001714:	40026070 	.word	0x40026070
 8001718:	40026088 	.word	0x40026088
 800171c:	400260a0 	.word	0x400260a0
 8001720:	400260b8 	.word	0x400260b8
 8001724:	40026410 	.word	0x40026410
 8001728:	40026428 	.word	0x40026428
 800172c:	40026440 	.word	0x40026440
 8001730:	40026458 	.word	0x40026458
 8001734:	40026470 	.word	0x40026470
 8001738:	40026488 	.word	0x40026488
 800173c:	400264a0 	.word	0x400264a0
 8001740:	400264b8 	.word	0x400264b8
 8001744:	08003814 	.word	0x08003814
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	2b00      	cmp	r3, #0
 800174e:	d012      	beq.n	8001776 <HAL_DMA_Init+0x2f2>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001758:	d00d      	beq.n	8001776 <HAL_DMA_Init+0x2f2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001762:	d008      	beq.n	8001776 <HAL_DMA_Init+0x2f2>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800176c:	d003      	beq.n	8001776 <HAL_DMA_Init+0x2f2>
 800176e:	21c8      	movs	r1, #200	; 0xc8
 8001770:	4850      	ldr	r0, [pc, #320]	; (80018b4 <HAL_DMA_Init+0x430>)
 8001772:	f7ff fc0e 	bl	8000f92 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2202      	movs	r2, #2
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001796:	e00f      	b.n	80017b8 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001798:	f7ff fd04 	bl	80011a4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d908      	bls.n	80017b8 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2220      	movs	r2, #32
 80017aa:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2203      	movs	r2, #3
 80017b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e078      	b.n	80018aa <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1e8      	bne.n	8001798 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_DMA_Init+0x434>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2b04      	cmp	r3, #4
 8001810:	d107      	bne.n	8001822 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4313      	orrs	r3, r2
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4313      	orrs	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f023 0307 	bic.w	r3, r3, #7
 8001838:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	2b04      	cmp	r3, #4
 800184a:	d117      	bne.n	800187c <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	4313      	orrs	r3, r2
 8001854:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00e      	beq.n	800187c <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fad4 	bl	8001e0c <DMA_CheckFifoParam>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2240      	movs	r2, #64	; 0x40
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001878:	2301      	movs	r3, #1
 800187a:	e016      	b.n	80018aa <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa8b 	bl	8001da0 <DMA_CalcBaseAndBitshift>
 800188a:	4603      	mov	r3, r0
 800188c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	223f      	movs	r2, #63	; 0x3f
 8001894:	409a      	lsls	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08003814 	.word	0x08003814
 80018b8:	f010803f 	.word	0xf010803f

080018bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_DMA_Start_IT+0x26>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d304      	bcc.n	80018ec <HAL_DMA_Start_IT+0x30>
 80018e2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80018e6:	4827      	ldr	r0, [pc, #156]	; (8001984 <HAL_DMA_Start_IT+0xc8>)
 80018e8:	f7ff fb53 	bl	8000f92 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Start_IT+0x3e>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e040      	b.n	800197c <HAL_DMA_Start_IT+0xc0>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d12f      	bne.n	800196e <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2202      	movs	r2, #2
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 fa0e 	bl	8001d44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	223f      	movs	r2, #63	; 0x3f
 800192e:	409a      	lsls	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0216 	orr.w	r2, r2, #22
 8001942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e005      	b.n	800197a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001976:	2302      	movs	r3, #2
 8001978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800197a:	7dfb      	ldrb	r3, [r7, #23]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	08003814 	.word	0x08003814

08001988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001994:	4b92      	ldr	r3, [pc, #584]	; (8001be0 <HAL_DMA_IRQHandler+0x258>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a92      	ldr	r2, [pc, #584]	; (8001be4 <HAL_DMA_IRQHandler+0x25c>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0a9b      	lsrs	r3, r3, #10
 80019a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	2208      	movs	r2, #8
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01a      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0204 	bic.w	r2, r2, #4
 80019da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	2208      	movs	r2, #8
 80019e2:	409a      	lsls	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2201      	movs	r2, #1
 80019fa:	409a      	lsls	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d012      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	2201      	movs	r2, #1
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	f043 0202 	orr.w	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2204      	movs	r2, #4
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d012      	beq.n	8001a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2210      	movs	r2, #16
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d043      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03c      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	2210      	movs	r2, #16
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d018      	beq.n	8001aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d024      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
 8001ab6:	e01f      	b.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01b      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
 8001ac8:	e016      	b.n	8001af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0208 	bic.w	r2, r2, #8
 8001ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	2220      	movs	r2, #32
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 808e 	beq.w	8001c26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8086 	beq.w	8001c26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1e:	2220      	movs	r2, #32
 8001b20:	409a      	lsls	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d136      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0216 	bic.w	r2, r2, #22
 8001b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d103      	bne.n	8001b62 <HAL_DMA_IRQHandler+0x1da>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0208 	bic.w	r2, r2, #8
 8001b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	223f      	movs	r2, #63	; 0x3f
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d07d      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
        }
        return;
 8001b9e:	e078      	b.n	8001c92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01c      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d108      	bne.n	8001bce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d030      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
 8001bcc:	e02b      	b.n	8001c26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d027      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
 8001bde:	e022      	b.n	8001c26 <HAL_DMA_IRQHandler+0x29e>
 8001be0:	20000004 	.word	0x20000004
 8001be4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0210 	bic.w	r2, r2, #16
 8001c04:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d032      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d022      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d307      	bcc.n	8001c6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f2      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x2ca>
 8001c6c:	e000      	b.n	8001c70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c6e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
 8001c90:	e000      	b.n	8001c94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c92:	bf00      	nop
    }
  }
}
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop

08001c9c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_DMA_RegisterCallback+0x20>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e03c      	b.n	8001d36 <HAL_DMA_RegisterCallback+0x9a>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d129      	bne.n	8001d24 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d829      	bhi.n	8001d2a <HAL_DMA_RegisterCallback+0x8e>
 8001cd6:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <HAL_DMA_RegisterCallback+0x40>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	08001cf5 	.word	0x08001cf5
 8001ce0:	08001cfd 	.word	0x08001cfd
 8001ce4:	08001d05 	.word	0x08001d05
 8001ce8:	08001d0d 	.word	0x08001d0d
 8001cec:	08001d15 	.word	0x08001d15
 8001cf0:	08001d1d 	.word	0x08001d1d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001cfa:	e017      	b.n	8001d2c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001d02:	e013      	b.n	8001d2c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001d0a:	e00f      	b.n	8001d2c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001d12:	e00b      	b.n	8001d2c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001d1a:	e007      	b.n	8001d2c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001d22:	e003      	b.n	8001d2c <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
 8001d28:	e000      	b.n	8001d2c <HAL_DMA_RegisterCallback+0x90>
      break;
 8001d2a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop

08001d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d108      	bne.n	8001d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d82:	e007      	b.n	8001d94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3b10      	subs	r3, #16
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <DMA_CalcBaseAndBitshift+0x64>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <DMA_CalcBaseAndBitshift+0x68>)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d909      	bls.n	8001de2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	1d1a      	adds	r2, r3, #4
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58
 8001de0:	e007      	b.n	8001df2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	aaaaaaab 	.word	0xaaaaaaab
 8001e08:	08003964 	.word	0x08003964

08001e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11f      	bne.n	8001e66 <DMA_CheckFifoParam+0x5a>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d856      	bhi.n	8001eda <DMA_CheckFifoParam+0xce>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <DMA_CheckFifoParam+0x28>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e57 	.word	0x08001e57
 8001e3c:	08001e45 	.word	0x08001e45
 8001e40:	08001edb 	.word	0x08001edb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d046      	beq.n	8001ede <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e54:	e043      	b.n	8001ede <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e5e:	d140      	bne.n	8001ee2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e64:	e03d      	b.n	8001ee2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e6e:	d121      	bne.n	8001eb4 <DMA_CheckFifoParam+0xa8>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d837      	bhi.n	8001ee6 <DMA_CheckFifoParam+0xda>
 8001e76:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <DMA_CheckFifoParam+0x70>)
 8001e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001e93 	.word	0x08001e93
 8001e84:	08001e8d 	.word	0x08001e8d
 8001e88:	08001ea5 	.word	0x08001ea5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e90:	e030      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d025      	beq.n	8001eea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea2:	e022      	b.n	8001eea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eac:	d11f      	bne.n	8001eee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eb2:	e01c      	b.n	8001eee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d903      	bls.n	8001ec2 <DMA_CheckFifoParam+0xb6>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d003      	beq.n	8001ec8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ec0:	e018      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec6:	e015      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed8:	e00b      	b.n	8001ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eda:	bf00      	nop
 8001edc:	e00a      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ede:	bf00      	nop
 8001ee0:	e008      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ee2:	bf00      	nop
 8001ee4:	e006      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ee6:	bf00      	nop
 8001ee8:	e004      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eea:	bf00      	nop
 8001eec:	e002      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a37      	ldr	r2, [pc, #220]	; (8001ffc <HAL_GPIO_Init+0xf8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01f      	beq.n	8001f62 <HAL_GPIO_Init+0x5e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a36      	ldr	r2, [pc, #216]	; (8002000 <HAL_GPIO_Init+0xfc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01b      	beq.n	8001f62 <HAL_GPIO_Init+0x5e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a35      	ldr	r2, [pc, #212]	; (8002004 <HAL_GPIO_Init+0x100>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d017      	beq.n	8001f62 <HAL_GPIO_Init+0x5e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a34      	ldr	r2, [pc, #208]	; (8002008 <HAL_GPIO_Init+0x104>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x5e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_GPIO_Init+0x108>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00f      	beq.n	8001f62 <HAL_GPIO_Init+0x5e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a32      	ldr	r2, [pc, #200]	; (8002010 <HAL_GPIO_Init+0x10c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00b      	beq.n	8001f62 <HAL_GPIO_Init+0x5e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a31      	ldr	r2, [pc, #196]	; (8002014 <HAL_GPIO_Init+0x110>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x5e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a30      	ldr	r2, [pc, #192]	; (8002018 <HAL_GPIO_Init+0x114>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x5e>
 8001f5a:	21ac      	movs	r1, #172	; 0xac
 8001f5c:	482f      	ldr	r0, [pc, #188]	; (800201c <HAL_GPIO_Init+0x118>)
 8001f5e:	f7ff f818 	bl	8000f92 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_GPIO_Init+0x74>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x7c>
 8001f78:	21ad      	movs	r1, #173	; 0xad
 8001f7a:	4828      	ldr	r0, [pc, #160]	; (800201c <HAL_GPIO_Init+0x118>)
 8001f7c:	f7ff f809 	bl	8000f92 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d035      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d031      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b11      	cmp	r3, #17
 8001f96:	d02d      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d029      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b12      	cmp	r3, #18
 8001fa6:	d025      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001fb0:	d020      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001fba:	d01b      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001fc4:	d016      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001fce:	d011      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
 8001fec:	21ae      	movs	r1, #174	; 0xae
 8001fee:	480b      	ldr	r0, [pc, #44]	; (800201c <HAL_GPIO_Init+0x118>)
 8001ff0:	f7fe ffcf 	bl	8000f92 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	e289      	b.n	800250e <HAL_GPIO_Init+0x60a>
 8001ffa:	bf00      	nop
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021400 	.word	0x40021400
 8002014:	40021800 	.word	0x40021800
 8002018:	40021c00 	.word	0x40021c00
 800201c:	0800384c 	.word	0x0800384c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	429a      	cmp	r2, r3
 800203a:	f040 8265 	bne.w	8002508 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d005      	beq.n	8002056 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002052:	2b02      	cmp	r3, #2
 8002054:	d144      	bne.n	80020e0 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00f      	beq.n	800207e <HAL_GPIO_Init+0x17a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d00b      	beq.n	800207e <HAL_GPIO_Init+0x17a>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x17a>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x17a>
 8002076:	21c0      	movs	r1, #192	; 0xc0
 8002078:	4831      	ldr	r0, [pc, #196]	; (8002140 <HAL_GPIO_Init+0x23c>)
 800207a:	f7fe ff8a 	bl	8000f92 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d02b      	beq.n	8002144 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <HAL_GPIO_Init+0x208>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d007      	beq.n	800210c <HAL_GPIO_Init+0x208>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x208>
 8002104:	21d1      	movs	r1, #209	; 0xd1
 8002106:	480e      	ldr	r0, [pc, #56]	; (8002140 <HAL_GPIO_Init+0x23c>)
 8002108:	f7fe ff43 	bl	8000f92 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	e002      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800213e:	bf00      	nop
 8002140:	0800384c 	.word	0x0800384c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	f040 810c 	bne.w	800236a <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80e3 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b09      	cmp	r3, #9
 8002162:	f000 80de 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80d9 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80d4 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80cf 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80ca 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b01      	cmp	r3, #1
 8002194:	f000 80c5 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b01      	cmp	r3, #1
 800219e:	f000 80c0 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	f000 80bb 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	f000 80b6 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	f000 80b1 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	f000 80ac 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	f000 80a7 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	f000 80a2 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	f000 809d 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	f000 8098 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	f000 8093 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b09      	cmp	r3, #9
 8002202:	f000 808e 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b06      	cmp	r3, #6
 800220c:	f000 8089 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b09      	cmp	r3, #9
 8002216:	f000 8084 	beq.w	8002322 <HAL_GPIO_Init+0x41e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b07      	cmp	r3, #7
 8002220:	d07f      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b07      	cmp	r3, #7
 8002228:	d07b      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b07      	cmp	r3, #7
 8002230:	d077      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d073      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b08      	cmp	r3, #8
 8002240:	d06f      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b08      	cmp	r3, #8
 8002248:	d06b      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b09      	cmp	r3, #9
 8002250:	d067      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d063      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b0a      	cmp	r3, #10
 8002260:	d05f      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b0a      	cmp	r3, #10
 8002268:	d05b      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b0b      	cmp	r3, #11
 8002270:	d057      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d053      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d04f      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b0d      	cmp	r3, #13
 8002288:	d04b      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	d047      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d043      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d03f      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d03b      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d037      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d033      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d02f      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d02b      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d027      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b07      	cmp	r3, #7
 80022d8:	d023      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b07      	cmp	r3, #7
 80022e0:	d01f      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b07      	cmp	r3, #7
 80022e8:	d01b      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b07      	cmp	r3, #7
 80022f0:	d017      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d00f      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b09      	cmp	r3, #9
 8002308:	d00b      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b0a      	cmp	r3, #10
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b0a      	cmp	r3, #10
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x41e>
 800231a:	21de      	movs	r1, #222	; 0xde
 800231c:	4880      	ldr	r0, [pc, #512]	; (8002520 <HAL_GPIO_Init+0x61c>)
 800231e:	f7fe fe38 	bl	8000f92 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	69b9      	ldr	r1, [r7, #24]
 8002366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0203 	and.w	r2, r3, #3
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80ae 	beq.w	8002508 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <HAL_GPIO_Init+0x620>)
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_GPIO_Init+0x620>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ba:	6453      	str	r3, [r2, #68]	; 0x44
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_GPIO_Init+0x620>)
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_GPIO_Init+0x624>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	220f      	movs	r2, #15
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a4f      	ldr	r2, [pc, #316]	; (800252c <HAL_GPIO_Init+0x628>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d025      	beq.n	8002440 <HAL_GPIO_Init+0x53c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a4e      	ldr	r2, [pc, #312]	; (8002530 <HAL_GPIO_Init+0x62c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01f      	beq.n	800243c <HAL_GPIO_Init+0x538>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a4d      	ldr	r2, [pc, #308]	; (8002534 <HAL_GPIO_Init+0x630>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d019      	beq.n	8002438 <HAL_GPIO_Init+0x534>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4c      	ldr	r2, [pc, #304]	; (8002538 <HAL_GPIO_Init+0x634>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x530>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4b      	ldr	r2, [pc, #300]	; (800253c <HAL_GPIO_Init+0x638>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x52c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_GPIO_Init+0x63c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x528>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a49      	ldr	r2, [pc, #292]	; (8002544 <HAL_GPIO_Init+0x640>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x524>
 8002424:	2306      	movs	r3, #6
 8002426:	e00c      	b.n	8002442 <HAL_GPIO_Init+0x53e>
 8002428:	2307      	movs	r3, #7
 800242a:	e00a      	b.n	8002442 <HAL_GPIO_Init+0x53e>
 800242c:	2305      	movs	r3, #5
 800242e:	e008      	b.n	8002442 <HAL_GPIO_Init+0x53e>
 8002430:	2304      	movs	r3, #4
 8002432:	e006      	b.n	8002442 <HAL_GPIO_Init+0x53e>
 8002434:	2303      	movs	r3, #3
 8002436:	e004      	b.n	8002442 <HAL_GPIO_Init+0x53e>
 8002438:	2302      	movs	r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x53e>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_GPIO_Init+0x53e>
 8002440:	2300      	movs	r3, #0
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	f002 0203 	and.w	r2, r2, #3
 8002448:	0092      	lsls	r2, r2, #2
 800244a:	4093      	lsls	r3, r2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002452:	4935      	ldr	r1, [pc, #212]	; (8002528 <HAL_GPIO_Init+0x624>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_GPIO_Init+0x644>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002484:	4a30      	ldr	r2, [pc, #192]	; (8002548 <HAL_GPIO_Init+0x644>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_GPIO_Init+0x644>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ae:	4a26      	ldr	r2, [pc, #152]	; (8002548 <HAL_GPIO_Init+0x644>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_GPIO_Init+0x644>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d8:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_GPIO_Init+0x644>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_GPIO_Init+0x644>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002502:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_GPIO_Init+0x644>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	f67f ad85 	bls.w	8002020 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	0800384c 	.word	0x0800384c
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
 8002558:	4613      	mov	r3, r2
 800255a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <HAL_GPIO_WritePin+0x20>
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_GPIO_WritePin+0x2a>
 800256c:	f240 119d 	movw	r1, #413	; 0x19d
 8002570:	480e      	ldr	r0, [pc, #56]	; (80025ac <HAL_GPIO_WritePin+0x60>)
 8002572:	f7fe fd0e 	bl	8000f92 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002576:	787b      	ldrb	r3, [r7, #1]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_GPIO_WritePin+0x40>
 800257c:	787b      	ldrb	r3, [r7, #1]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d004      	beq.n	800258c <HAL_GPIO_WritePin+0x40>
 8002582:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002586:	4809      	ldr	r0, [pc, #36]	; (80025ac <HAL_GPIO_WritePin+0x60>)
 8002588:	f7fe fd03 	bl	8000f92 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	0800384c 	.word	0x0800384c

080025b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_PWREx_EnableOverDrive+0x90>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_PWREx_EnableOverDrive+0x90>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_PWREx_EnableOverDrive+0x90>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_PWREx_EnableOverDrive+0x94>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025dc:	f7fe fde2 	bl	80011a4 <HAL_GetTick>
 80025e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e2:	e009      	b.n	80025f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025e4:	f7fe fdde 	bl	80011a4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025f2:	d901      	bls.n	80025f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e01f      	b.n	8002638 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_PWREx_EnableOverDrive+0x98>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d1ee      	bne.n	80025e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800260c:	f7fe fdca 	bl	80011a4 <HAL_GetTick>
 8002610:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002612:	e009      	b.n	8002628 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002614:	f7fe fdc6 	bl	80011a4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002622:	d901      	bls.n	8002628 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e007      	b.n	8002638 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_PWREx_EnableOverDrive+0x98>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002634:	d1ee      	bne.n	8002614 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	420e0040 	.word	0x420e0040
 8002648:	40007000 	.word	0x40007000
 800264c:	420e0044 	.word	0x420e0044

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e18c      	b.n	800297e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_RCC_ClockConfig+0x24>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d904      	bls.n	800267e <HAL_RCC_ClockConfig+0x2e>
 8002674:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8002678:	4887      	ldr	r0, [pc, #540]	; (8002898 <HAL_RCC_ClockConfig+0x248>)
 800267a:	f7fe fc8a 	bl	8000f92 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d031      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d02e      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d02b      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d028      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d025      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d022      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d01f      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d01c      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d019      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b09      	cmp	r3, #9
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b0a      	cmp	r3, #10
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b0b      	cmp	r3, #11
 80026c4:	d010      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	d00d      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b0d      	cmp	r3, #13
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b0e      	cmp	r3, #14
 80026d6:	d007      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d004      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x98>
 80026de:	f240 215d 	movw	r1, #605	; 0x25d
 80026e2:	486d      	ldr	r0, [pc, #436]	; (8002898 <HAL_RCC_ClockConfig+0x248>)
 80026e4:	f7fe fc55 	bl	8000f92 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b6c      	ldr	r3, [pc, #432]	; (800289c <HAL_RCC_ClockConfig+0x24c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d90c      	bls.n	8002710 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_ClockConfig+0x24c>)
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_RCC_ClockConfig+0x24c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e136      	b.n	800297e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d049      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002728:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a5c      	ldr	r2, [pc, #368]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 800272e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002740:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a56      	ldr	r2, [pc, #344]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 8002746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800274a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d024      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b90      	cmp	r3, #144	; 0x90
 8002762:	d01c      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2ba0      	cmp	r3, #160	; 0xa0
 800276a:	d018      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2bb0      	cmp	r3, #176	; 0xb0
 8002772:	d014      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2bc0      	cmp	r3, #192	; 0xc0
 800277a:	d010      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2bd0      	cmp	r3, #208	; 0xd0
 8002782:	d00c      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2be0      	cmp	r3, #224	; 0xe0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2bf0      	cmp	r3, #240	; 0xf0
 8002792:	d004      	beq.n	800279e <HAL_RCC_ClockConfig+0x14e>
 8002794:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002798:	483f      	ldr	r0, [pc, #252]	; (8002898 <HAL_RCC_ClockConfig+0x248>)
 800279a:	f7fe fbfa 	bl	8000f92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279e:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	493d      	ldr	r1, [pc, #244]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d059      	beq.n	8002870 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d010      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x196>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d00c      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x196>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x196>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d004      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x196>
 80027dc:	f240 2187 	movw	r1, #647	; 0x287
 80027e0:	482d      	ldr	r0, [pc, #180]	; (8002898 <HAL_RCC_ClockConfig+0x248>)
 80027e2:	f7fe fbd6 	bl	8000f92 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b2c      	ldr	r3, [pc, #176]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d119      	bne.n	800282e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0bf      	b.n	800297e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d003      	beq.n	800280e <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280a:	2b03      	cmp	r3, #3
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0af      	b.n	800297e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0a7      	b.n	800297e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 0203 	bic.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4919      	ldr	r1, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002840:	f7fe fcb0 	bl	80011a4 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe fcac 	bl	80011a4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e08f      	b.n	800297e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_ClockConfig+0x250>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 020c 	and.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	429a      	cmp	r2, r3
 800286e:	d1eb      	bne.n	8002848 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x24c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d212      	bcs.n	80028a4 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_RCC_ClockConfig+0x24c>)
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_ClockConfig+0x24c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d007      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e072      	b.n	800297e <HAL_RCC_ClockConfig+0x32e>
 8002898:	08003888 	.word	0x08003888
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d025      	beq.n	80028fc <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d018      	beq.n	80028ea <HAL_RCC_ClockConfig+0x29a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c0:	d013      	beq.n	80028ea <HAL_RCC_ClockConfig+0x29a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80028ca:	d00e      	beq.n	80028ea <HAL_RCC_ClockConfig+0x29a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80028d4:	d009      	beq.n	80028ea <HAL_RCC_ClockConfig+0x29a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80028de:	d004      	beq.n	80028ea <HAL_RCC_ClockConfig+0x29a>
 80028e0:	f240 21c5 	movw	r1, #709	; 0x2c5
 80028e4:	4828      	ldr	r0, [pc, #160]	; (8002988 <HAL_RCC_ClockConfig+0x338>)
 80028e6:	f7fe fb54 	bl	8000f92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_RCC_ClockConfig+0x33c>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4925      	ldr	r1, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x33c>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d026      	beq.n	8002956 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d018      	beq.n	8002942 <HAL_RCC_ClockConfig+0x2f2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	d013      	beq.n	8002942 <HAL_RCC_ClockConfig+0x2f2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002922:	d00e      	beq.n	8002942 <HAL_RCC_ClockConfig+0x2f2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x2f2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002936:	d004      	beq.n	8002942 <HAL_RCC_ClockConfig+0x2f2>
 8002938:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800293c:	4812      	ldr	r0, [pc, #72]	; (8002988 <HAL_RCC_ClockConfig+0x338>)
 800293e:	f7fe fb28 	bl	8000f92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x33c>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x33c>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f82d 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x33c>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x340>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x344>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x348>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fbd0 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	08003888 	.word	0x08003888
 800298c:	40023800 	.word	0x40023800
 8002990:	08003954 	.word	0x08003954
 8002994:	20000004 	.word	0x20000004
 8002998:	20000008 	.word	0x20000008

0800299c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d0:	4bce      	ldr	r3, [pc, #824]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	f200 818d 	bhi.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x344>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	08002a19 	.word	0x08002a19
 80029e8:	08002cf9 	.word	0x08002cf9
 80029ec:	08002cf9 	.word	0x08002cf9
 80029f0:	08002cf9 	.word	0x08002cf9
 80029f4:	08002a1f 	.word	0x08002a1f
 80029f8:	08002cf9 	.word	0x08002cf9
 80029fc:	08002cf9 	.word	0x08002cf9
 8002a00:	08002cf9 	.word	0x08002cf9
 8002a04:	08002a25 	.word	0x08002a25
 8002a08:	08002cf9 	.word	0x08002cf9
 8002a0c:	08002cf9 	.word	0x08002cf9
 8002a10:	08002cf9 	.word	0x08002cf9
 8002a14:	08002b99 	.word	0x08002b99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4bbd      	ldr	r3, [pc, #756]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a1a:	61bb      	str	r3, [r7, #24]
       break;
 8002a1c:	e16f      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1e:	4bbd      	ldr	r3, [pc, #756]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x360>)
 8002a20:	61bb      	str	r3, [r7, #24]
      break;
 8002a22:	e16c      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a24:	4bb9      	ldr	r3, [pc, #740]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2e:	4bb7      	ldr	r3, [pc, #732]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d053      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3a:	4bb4      	ldr	r3, [pc, #720]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	461a      	mov	r2, r3
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	ea02 0400 	and.w	r4, r2, r0
 8002a52:	603c      	str	r4, [r7, #0]
 8002a54:	400b      	ands	r3, r1
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	4629      	mov	r1, r5
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	014b      	lsls	r3, r1, #5
 8002a6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a6e:	0142      	lsls	r2, r0, #5
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	4623      	mov	r3, r4
 8002a76:	1ac0      	subs	r0, r0, r3
 8002a78:	462b      	mov	r3, r5
 8002a7a:	eb61 0103 	sbc.w	r1, r1, r3
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	018b      	lsls	r3, r1, #6
 8002a88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a8c:	0182      	lsls	r2, r0, #6
 8002a8e:	1a12      	subs	r2, r2, r0
 8002a90:	eb63 0301 	sbc.w	r3, r3, r1
 8002a94:	f04f 0000 	mov.w	r0, #0
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	00d9      	lsls	r1, r3, #3
 8002a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aa2:	00d0      	lsls	r0, r2, #3
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	1852      	adds	r2, r2, r1
 8002aac:	4629      	mov	r1, r5
 8002aae:	eb43 0101 	adc.w	r1, r3, r1
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	0259      	lsls	r1, r3, #9
 8002abe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ac2:	0250      	lsls	r0, r2, #9
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	f7fd fb96 	bl	8000204 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	e04c      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4b8a      	ldr	r3, [pc, #552]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	ea02 0a00 	and.w	sl, r2, r0
 8002afa:	ea03 0b01 	and.w	fp, r3, r1
 8002afe:	4650      	mov	r0, sl
 8002b00:	4659      	mov	r1, fp
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	014b      	lsls	r3, r1, #5
 8002b0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b10:	0142      	lsls	r2, r0, #5
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	ebb0 000a 	subs.w	r0, r0, sl
 8002b1a:	eb61 010b 	sbc.w	r1, r1, fp
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b2c:	0182      	lsls	r2, r0, #6
 8002b2e:	1a12      	subs	r2, r2, r0
 8002b30:	eb63 0301 	sbc.w	r3, r3, r1
 8002b34:	f04f 0000 	mov.w	r0, #0
 8002b38:	f04f 0100 	mov.w	r1, #0
 8002b3c:	00d9      	lsls	r1, r3, #3
 8002b3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b42:	00d0      	lsls	r0, r2, #3
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	eb12 020a 	adds.w	r2, r2, sl
 8002b4c:	eb43 030b 	adc.w	r3, r3, fp
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	0299      	lsls	r1, r3, #10
 8002b5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b5e:	0290      	lsls	r0, r2, #10
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f7fd fb48 	bl	8000204 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b7c:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	3301      	adds	r3, #1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	61bb      	str	r3, [r7, #24]
      break;
 8002b96:	e0b2      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba2:	4b5a      	ldr	r3, [pc, #360]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d04d      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	ea02 0800 	and.w	r8, r2, r0
 8002bc6:	ea03 0901 	and.w	r9, r3, r1
 8002bca:	4640      	mov	r0, r8
 8002bcc:	4649      	mov	r1, r9
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	014b      	lsls	r3, r1, #5
 8002bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bdc:	0142      	lsls	r2, r0, #5
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	ebb0 0008 	subs.w	r0, r0, r8
 8002be6:	eb61 0109 	sbc.w	r1, r1, r9
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	018b      	lsls	r3, r1, #6
 8002bf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bf8:	0182      	lsls	r2, r0, #6
 8002bfa:	1a12      	subs	r2, r2, r0
 8002bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8002c00:	f04f 0000 	mov.w	r0, #0
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	00d9      	lsls	r1, r3, #3
 8002c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c0e:	00d0      	lsls	r0, r2, #3
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	eb12 0208 	adds.w	r2, r2, r8
 8002c18:	eb43 0309 	adc.w	r3, r3, r9
 8002c1c:	f04f 0000 	mov.w	r0, #0
 8002c20:	f04f 0100 	mov.w	r1, #0
 8002c24:	0259      	lsls	r1, r3, #9
 8002c26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c2a:	0250      	lsls	r0, r2, #9
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	f7fd fae2 	bl	8000204 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4613      	mov	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e04a      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	099b      	lsrs	r3, r3, #6
 8002c50:	461a      	mov	r2, r3
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	ea02 0400 	and.w	r4, r2, r0
 8002c62:	ea03 0501 	and.w	r5, r3, r1
 8002c66:	4620      	mov	r0, r4
 8002c68:	4629      	mov	r1, r5
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	014b      	lsls	r3, r1, #5
 8002c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c78:	0142      	lsls	r2, r0, #5
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	1b00      	subs	r0, r0, r4
 8002c80:	eb61 0105 	sbc.w	r1, r1, r5
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	018b      	lsls	r3, r1, #6
 8002c8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c92:	0182      	lsls	r2, r0, #6
 8002c94:	1a12      	subs	r2, r2, r0
 8002c96:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9a:	f04f 0000 	mov.w	r0, #0
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	00d9      	lsls	r1, r3, #3
 8002ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ca8:	00d0      	lsls	r0, r2, #3
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	1912      	adds	r2, r2, r4
 8002cb0:	eb45 0303 	adc.w	r3, r5, r3
 8002cb4:	f04f 0000 	mov.w	r0, #0
 8002cb8:	f04f 0100 	mov.w	r1, #0
 8002cbc:	0299      	lsls	r1, r3, #10
 8002cbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cc2:	0290      	lsls	r0, r2, #10
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	f7fd fa96 	bl	8000204 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0f1b      	lsrs	r3, r3, #28
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	61bb      	str	r3, [r7, #24]
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cfa:	61bb      	str	r3, [r7, #24]
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e34b      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	d904      	bls.n	8002d3c <HAL_RCC_OscConfig+0x24>
 8002d32:	f640 5112 	movw	r1, #3346	; 0xd12
 8002d36:	48a5      	ldr	r0, [pc, #660]	; (8002fcc <HAL_RCC_OscConfig+0x2b4>)
 8002d38:	f7fe f92b 	bl	8000f92 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8096 	beq.w	8002e76 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00e      	beq.n	8002d70 <HAL_RCC_OscConfig+0x58>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCC_OscConfig+0x58>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d004      	beq.n	8002d70 <HAL_RCC_OscConfig+0x58>
 8002d66:	f640 5117 	movw	r1, #3351	; 0xd17
 8002d6a:	4898      	ldr	r0, [pc, #608]	; (8002fcc <HAL_RCC_OscConfig+0x2b4>)
 8002d6c:	f7fe f911 	bl	8000f92 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d70:	4b97      	ldr	r3, [pc, #604]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d019      	beq.n	8002db0 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d7c:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d88:	4b91      	ldr	r3, [pc, #580]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d94:	d00c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b8e      	ldr	r3, [pc, #568]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d112      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b8b      	ldr	r3, [pc, #556]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	4b87      	ldr	r3, [pc, #540]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05b      	beq.n	8002e74 <HAL_RCC_OscConfig+0x15c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d157      	bne.n	8002e74 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e2fc      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0xc8>
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7e      	ldr	r2, [pc, #504]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01d      	b.n	8002e1c <HAL_RCC_OscConfig+0x104>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0xec>
 8002dea:	4b79      	ldr	r3, [pc, #484]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a78      	ldr	r2, [pc, #480]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a75      	ldr	r2, [pc, #468]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x104>
 8002e04:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a71      	ldr	r2, [pc, #452]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6e      	ldr	r2, [pc, #440]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe f9be 	bl	80011a4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f9ba 	bl	80011a4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e2c1      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b64      	ldr	r3, [pc, #400]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x114>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f9aa 	bl	80011a4 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe f9a6 	bl	80011a4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e2ad      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	4b5a      	ldr	r3, [pc, #360]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x13c>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8086 	beq.w	8002f90 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_OscConfig+0x186>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d004      	beq.n	8002e9e <HAL_RCC_OscConfig+0x186>
 8002e94:	f640 514f 	movw	r1, #3407	; 0xd4f
 8002e98:	484c      	ldr	r0, [pc, #304]	; (8002fcc <HAL_RCC_OscConfig+0x2b4>)
 8002e9a:	f7fe f87a 	bl	8000f92 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b1f      	cmp	r3, #31
 8002ea4:	d904      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x198>
 8002ea6:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 8002eaa:	4848      	ldr	r0, [pc, #288]	; (8002fcc <HAL_RCC_OscConfig+0x2b4>)
 8002eac:	f7fe f871 	bl	8000f92 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002eb0:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d017      	beq.n	8002eec <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ebc:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed4:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d11c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d116      	bne.n	8002f1a <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_OscConfig+0x1ec>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e25e      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	492f      	ldr	r1, [pc, #188]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f18:	e03a      	b.n	8002f90 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d020      	beq.n	8002f64 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f22:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <HAL_RCC_OscConfig+0x2bc>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe f93c 	bl	80011a4 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe f938 	bl	80011a4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e23f      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	491c      	ldr	r1, [pc, #112]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
 8002f62:	e015      	b.n	8002f90 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x2bc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe f91b 	bl	80011a4 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe f917 	bl	80011a4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e21e      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d045      	beq.n	8003028 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x29e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d004      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x29e>
 8002fac:	f640 5196 	movw	r1, #3478	; 0xd96
 8002fb0:	4806      	ldr	r0, [pc, #24]	; (8002fcc <HAL_RCC_OscConfig+0x2b4>)
 8002fb2:	f7fd ffee 	bl	8000f92 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01e      	beq.n	8002ffc <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCC_OscConfig+0x2c0>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fe f8ee 	bl	80011a4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	e010      	b.n	8002fee <HAL_RCC_OscConfig+0x2d6>
 8002fcc:	080038c0 	.word	0x080038c0
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	42470000 	.word	0x42470000
 8002fd8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7fe f8e2 	bl	80011a4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1e9      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	4ba4      	ldr	r3, [pc, #656]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x2c4>
 8002ffa:	e015      	b.n	8003028 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffc:	4ba1      	ldr	r3, [pc, #644]	; (8003284 <HAL_RCC_OscConfig+0x56c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7fe f8cf 	bl	80011a4 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300a:	f7fe f8cb 	bl	80011a4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1d2      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	4b98      	ldr	r3, [pc, #608]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80a8 	beq.w	8003186 <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x344>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d008      	beq.n	800305c <HAL_RCC_OscConfig+0x344>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d004      	beq.n	800305c <HAL_RCC_OscConfig+0x344>
 8003052:	f640 51c2 	movw	r1, #3522	; 0xdc2
 8003056:	488c      	ldr	r0, [pc, #560]	; (8003288 <HAL_RCC_OscConfig+0x570>)
 8003058:	f7fd ff9b 	bl	8000f92 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305c:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10f      	bne.n	8003088 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	4b84      	ldr	r3, [pc, #528]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	4a83      	ldr	r2, [pc, #524]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	6413      	str	r3, [r2, #64]	; 0x40
 8003078:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b80      	ldr	r3, [pc, #512]	; (800328c <HAL_RCC_OscConfig+0x574>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d118      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003094:	4b7d      	ldr	r3, [pc, #500]	; (800328c <HAL_RCC_OscConfig+0x574>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7c      	ldr	r2, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x574>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a0:	f7fe f880 	bl	80011a4 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a8:	f7fe f87c 	bl	80011a4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e183      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b74      	ldr	r3, [pc, #464]	; (800328c <HAL_RCC_OscConfig+0x574>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x3c4>
 80030ce:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4a6b      	ldr	r2, [pc, #428]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6713      	str	r3, [r2, #112]	; 0x70
 80030da:	e01c      	b.n	8003116 <HAL_RCC_OscConfig+0x3fe>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d10c      	bne.n	80030fe <HAL_RCC_OscConfig+0x3e6>
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6713      	str	r3, [r2, #112]	; 0x70
 80030f0:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	4a62      	ldr	r2, [pc, #392]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6713      	str	r3, [r2, #112]	; 0x70
 80030fc:	e00b      	b.n	8003116 <HAL_RCC_OscConfig+0x3fe>
 80030fe:	4b60      	ldr	r3, [pc, #384]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a5f      	ldr	r2, [pc, #380]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
 800310a:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a5c      	ldr	r2, [pc, #368]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d015      	beq.n	800314a <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fe f841 	bl	80011a4 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fe f83d 	bl	80011a4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e142      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ee      	beq.n	8003126 <HAL_RCC_OscConfig+0x40e>
 8003148:	e014      	b.n	8003174 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe f82b 	bl	80011a4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe f827 	bl	80011a4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e12c      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003168:	4b45      	ldr	r3, [pc, #276]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ee      	bne.n	8003152 <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d105      	bne.n	8003186 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a40      	ldr	r2, [pc, #256]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x490>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d008      	beq.n	80031a8 <HAL_RCC_OscConfig+0x490>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d004      	beq.n	80031a8 <HAL_RCC_OscConfig+0x490>
 800319e:	f640 6105 	movw	r1, #3589	; 0xe05
 80031a2:	4839      	ldr	r0, [pc, #228]	; (8003288 <HAL_RCC_OscConfig+0x570>)
 80031a4:	f7fd fef5 	bl	8000f92 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8107 	beq.w	80033c0 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b2:	4b33      	ldr	r3, [pc, #204]	; (8003280 <HAL_RCC_OscConfig+0x568>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	f000 80c0 	beq.w	8003340 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f040 80a4 	bne.w	8003312 <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_OscConfig+0x4ce>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031da:	d004      	beq.n	80031e6 <HAL_RCC_OscConfig+0x4ce>
 80031dc:	f640 610e 	movw	r1, #3598	; 0xe0e
 80031e0:	4829      	ldr	r0, [pc, #164]	; (8003288 <HAL_RCC_OscConfig+0x570>)
 80031e2:	f7fd fed6 	bl	8000f92 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	2b3f      	cmp	r3, #63	; 0x3f
 80031ec:	d904      	bls.n	80031f8 <HAL_RCC_OscConfig+0x4e0>
 80031ee:	f640 610f 	movw	r1, #3599	; 0xe0f
 80031f2:	4825      	ldr	r0, [pc, #148]	; (8003288 <HAL_RCC_OscConfig+0x570>)
 80031f4:	f7fd fecd 	bl	8000f92 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	2b31      	cmp	r3, #49	; 0x31
 80031fe:	d904      	bls.n	800320a <HAL_RCC_OscConfig+0x4f2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003208:	d904      	bls.n	8003214 <HAL_RCC_OscConfig+0x4fc>
 800320a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800320e:	481e      	ldr	r0, [pc, #120]	; (8003288 <HAL_RCC_OscConfig+0x570>)
 8003210:	f7fd febf 	bl	8000f92 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	2b02      	cmp	r3, #2
 800321a:	d010      	beq.n	800323e <HAL_RCC_OscConfig+0x526>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	2b04      	cmp	r3, #4
 8003222:	d00c      	beq.n	800323e <HAL_RCC_OscConfig+0x526>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	2b06      	cmp	r3, #6
 800322a:	d008      	beq.n	800323e <HAL_RCC_OscConfig+0x526>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	2b08      	cmp	r3, #8
 8003232:	d004      	beq.n	800323e <HAL_RCC_OscConfig+0x526>
 8003234:	f640 6111 	movw	r1, #3601	; 0xe11
 8003238:	4813      	ldr	r0, [pc, #76]	; (8003288 <HAL_RCC_OscConfig+0x570>)
 800323a:	f7fd feaa 	bl	8000f92 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d903      	bls.n	800324e <HAL_RCC_OscConfig+0x536>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	2b0f      	cmp	r3, #15
 800324c:	d904      	bls.n	8003258 <HAL_RCC_OscConfig+0x540>
 800324e:	f640 6112 	movw	r1, #3602	; 0xe12
 8003252:	480d      	ldr	r0, [pc, #52]	; (8003288 <HAL_RCC_OscConfig+0x570>)
 8003254:	f7fd fe9d 	bl	8000f92 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	2b01      	cmp	r3, #1
 800325e:	d903      	bls.n	8003268 <HAL_RCC_OscConfig+0x550>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	2b07      	cmp	r3, #7
 8003266:	d904      	bls.n	8003272 <HAL_RCC_OscConfig+0x55a>
 8003268:	f640 6113 	movw	r1, #3603	; 0xe13
 800326c:	4806      	ldr	r0, [pc, #24]	; (8003288 <HAL_RCC_OscConfig+0x570>)
 800326e:	f7fd fe90 	bl	8000f92 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_RCC_OscConfig+0x578>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fd ff94 	bl	80011a4 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e012      	b.n	80032a6 <HAL_RCC_OscConfig+0x58e>
 8003280:	40023800 	.word	0x40023800
 8003284:	42470e80 	.word	0x42470e80
 8003288:	080038c0 	.word	0x080038c0
 800328c:	40007000 	.word	0x40007000
 8003290:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7fd ff86 	bl	80011a4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e08d      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	4b49      	ldr	r3, [pc, #292]	; (80033cc <HAL_RCC_OscConfig+0x6b4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	019b      	lsls	r3, r3, #6
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	3b01      	subs	r3, #1
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	071b      	lsls	r3, r3, #28
 80032de:	493b      	ldr	r1, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x6b4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_RCC_OscConfig+0x6b8>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd ff5b 	bl	80011a4 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fd ff57 	bl	80011a4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e05e      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	4b31      	ldr	r3, [pc, #196]	; (80033cc <HAL_RCC_OscConfig+0x6b4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x5da>
 8003310:	e056      	b.n	80033c0 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <HAL_RCC_OscConfig+0x6b8>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fd ff44 	bl	80011a4 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003320:	f7fd ff40 	bl	80011a4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e047      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCC_OscConfig+0x6b4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x608>
 800333e:	e03f      	b.n	80033c0 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e03a      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <HAL_RCC_OscConfig+0x6b4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d030      	beq.n	80033bc <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d129      	bne.n	80033bc <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d122      	bne.n	80033bc <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d119      	bne.n	80033bc <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	3b01      	subs	r3, #1
 8003396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d10f      	bne.n	80033bc <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470060 	.word	0x42470060

080033d4 <CMN_PortEnableClock>:
/**
 * @brief Enable GPIO clock
 * @param port Port to be enabled
 */
void CMN_PortEnableClock(GPIO_TypeDef *port)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(port));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a5f      	ldr	r2, [pc, #380]	; (800355c <CMN_PortEnableClock+0x188>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d01f      	beq.n	8003424 <CMN_PortEnableClock+0x50>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a5e      	ldr	r2, [pc, #376]	; (8003560 <CMN_PortEnableClock+0x18c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01b      	beq.n	8003424 <CMN_PortEnableClock+0x50>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a5d      	ldr	r2, [pc, #372]	; (8003564 <CMN_PortEnableClock+0x190>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d017      	beq.n	8003424 <CMN_PortEnableClock+0x50>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a5c      	ldr	r2, [pc, #368]	; (8003568 <CMN_PortEnableClock+0x194>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <CMN_PortEnableClock+0x50>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a5b      	ldr	r2, [pc, #364]	; (800356c <CMN_PortEnableClock+0x198>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00f      	beq.n	8003424 <CMN_PortEnableClock+0x50>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a5a      	ldr	r2, [pc, #360]	; (8003570 <CMN_PortEnableClock+0x19c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00b      	beq.n	8003424 <CMN_PortEnableClock+0x50>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a59      	ldr	r2, [pc, #356]	; (8003574 <CMN_PortEnableClock+0x1a0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <CMN_PortEnableClock+0x50>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a58      	ldr	r2, [pc, #352]	; (8003578 <CMN_PortEnableClock+0x1a4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <CMN_PortEnableClock+0x50>
 800341c:	2143      	movs	r1, #67	; 0x43
 800341e:	4857      	ldr	r0, [pc, #348]	; (800357c <CMN_PortEnableClock+0x1a8>)
 8003420:	f7fd fdb7 	bl	8000f92 <assert_failed>

  /* Enable appropriate GPIO clock */
  if (port == GPIOH)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a54      	ldr	r2, [pc, #336]	; (8003578 <CMN_PortEnableClock+0x1a4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10e      	bne.n	800344a <CMN_PortEnableClock+0x76>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
 8003430:	4b53      	ldr	r3, [pc, #332]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	4a52      	ldr	r2, [pc, #328]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343a:	6313      	str	r3, [r2, #48]	; 0x30
 800343c:	4b50      	ldr	r3, [pc, #320]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
  else if (port == GPIOB)
    __HAL_RCC_GPIOB_CLK_ENABLE();
  else if (port == GPIOA)
    __HAL_RCC_GPIOA_CLK_ENABLE();
}
 8003448:	e083      	b.n	8003552 <CMN_PortEnableClock+0x17e>
  else if (port == GPIOG)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a49      	ldr	r2, [pc, #292]	; (8003574 <CMN_PortEnableClock+0x1a0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10e      	bne.n	8003470 <CMN_PortEnableClock+0x9c>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	623b      	str	r3, [r7, #32]
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a49      	ldr	r2, [pc, #292]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 800345c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	6a3b      	ldr	r3, [r7, #32]
}
 800346e:	e070      	b.n	8003552 <CMN_PortEnableClock+0x17e>
  else if (port == GPIOF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3f      	ldr	r2, [pc, #252]	; (8003570 <CMN_PortEnableClock+0x19c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10e      	bne.n	8003496 <CMN_PortEnableClock+0xc2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	4b40      	ldr	r3, [pc, #256]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4a3f      	ldr	r2, [pc, #252]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003482:	f043 0320 	orr.w	r3, r3, #32
 8003486:	6313      	str	r3, [r2, #48]	; 0x30
 8003488:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	69fb      	ldr	r3, [r7, #28]
}
 8003494:	e05d      	b.n	8003552 <CMN_PortEnableClock+0x17e>
  else if (port == GPIOE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a34      	ldr	r2, [pc, #208]	; (800356c <CMN_PortEnableClock+0x198>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10e      	bne.n	80034bc <CMN_PortEnableClock+0xe8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	4b37      	ldr	r3, [pc, #220]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a36      	ldr	r2, [pc, #216]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034a8:	f043 0310 	orr.w	r3, r3, #16
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b34      	ldr	r3, [pc, #208]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	69bb      	ldr	r3, [r7, #24]
}
 80034ba:	e04a      	b.n	8003552 <CMN_PortEnableClock+0x17e>
  else if (port == GPIOD)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <CMN_PortEnableClock+0x194>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d10e      	bne.n	80034e2 <CMN_PortEnableClock+0x10e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034ce:	f043 0308 	orr.w	r3, r3, #8
 80034d2:	6313      	str	r3, [r2, #48]	; 0x30
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	697b      	ldr	r3, [r7, #20]
}
 80034e0:	e037      	b.n	8003552 <CMN_PortEnableClock+0x17e>
  else if (port == GPIOC)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <CMN_PortEnableClock+0x190>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10e      	bne.n	8003508 <CMN_PortEnableClock+0x134>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a23      	ldr	r2, [pc, #140]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b21      	ldr	r3, [pc, #132]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
}
 8003506:	e024      	b.n	8003552 <CMN_PortEnableClock+0x17e>
  else if (port == GPIOB)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <CMN_PortEnableClock+0x18c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d10e      	bne.n	800352e <CMN_PortEnableClock+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a19      	ldr	r2, [pc, #100]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 800351a:	f043 0302 	orr.w	r3, r3, #2
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	e011      	b.n	8003552 <CMN_PortEnableClock+0x17e>
  else if (port == GPIOA)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a0a      	ldr	r2, [pc, #40]	; (800355c <CMN_PortEnableClock+0x188>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10d      	bne.n	8003552 <CMN_PortEnableClock+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a10      	ldr	r2, [pc, #64]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <CMN_PortEnableClock+0x1ac>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40020000 	.word	0x40020000
 8003560:	40020400 	.word	0x40020400
 8003564:	40020800 	.word	0x40020800
 8003568:	40020c00 	.word	0x40020c00
 800356c:	40021000 	.word	0x40021000
 8003570:	40021400 	.word	0x40021400
 8003574:	40021800 	.word	0x40021800
 8003578:	40021c00 	.word	0x40021c00
 800357c:	080038fc 	.word	0x080038fc
 8003580:	40023800 	.word	0x40023800

08003584 <LED_Init>:
 * @param port The GPIO port used
 * @param pin_num The GPIO pin number
 * @return HAL Status
 */
HAL_StatusTypeDef LED_Init(struct Led *led, GPIO_TypeDef *port, uint8_t pin_num)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	71fb      	strb	r3, [r7, #7]
  /* Check the structure handle allocation */
  if (led == NULL)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <LED_Init+0x18>
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e069      	b.n	8003670 <LED_Init+0xec>
  if (pin_num >= GPIO_PIN_CNT) {
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	2b0f      	cmp	r3, #15
 80035a0:	d901      	bls.n	80035a6 <LED_Init+0x22>
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e064      	b.n	8003670 <LED_Init+0xec>
  }

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(port));
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4a33      	ldr	r2, [pc, #204]	; (8003678 <LED_Init+0xf4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01f      	beq.n	80035ee <LED_Init+0x6a>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4a32      	ldr	r2, [pc, #200]	; (800367c <LED_Init+0xf8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01b      	beq.n	80035ee <LED_Init+0x6a>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4a31      	ldr	r2, [pc, #196]	; (8003680 <LED_Init+0xfc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d017      	beq.n	80035ee <LED_Init+0x6a>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4a30      	ldr	r2, [pc, #192]	; (8003684 <LED_Init+0x100>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <LED_Init+0x6a>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <LED_Init+0x104>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00f      	beq.n	80035ee <LED_Init+0x6a>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4a2e      	ldr	r2, [pc, #184]	; (800368c <LED_Init+0x108>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00b      	beq.n	80035ee <LED_Init+0x6a>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a2d      	ldr	r2, [pc, #180]	; (8003690 <LED_Init+0x10c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <LED_Init+0x6a>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <LED_Init+0x110>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <LED_Init+0x6a>
 80035e6:	211c      	movs	r1, #28
 80035e8:	482b      	ldr	r0, [pc, #172]	; (8003698 <LED_Init+0x114>)
 80035ea:	f7fd fcd2 	bl	8000f92 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_PIN(pin_num)));
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	2201      	movs	r2, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <LED_Init+0x88>
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2201      	movs	r2, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <LED_Init+0x90>
 800360c:	211d      	movs	r1, #29
 800360e:	4822      	ldr	r0, [pc, #136]	; (8003698 <LED_Init+0x114>)
 8003610:	f7fd fcbf 	bl	8000f92 <assert_failed>

  /* Initialize properties */
  led->Lock = HAL_UNLOCKED;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
  led->port = port;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	605a      	str	r2, [r3, #4]
  led->pin_num = pin_num;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	771a      	strb	r2, [r3, #28]

  /* Enable the GPIO Clock */
  CMN_PortEnableClock(port);
 8003626:	68b8      	ldr	r0, [r7, #8]
 8003628:	f7ff fed4 	bl	80033d4 <CMN_PortEnableClock>

  /* Configure the GPIO pin */
  led->init.Pin = GPIO_PIN(led->pin_num);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	7f1b      	ldrb	r3, [r3, #28]
 8003630:	461a      	mov	r2, r3
 8003632:	2301      	movs	r3, #1
 8003634:	4093      	lsls	r3, r2
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	609a      	str	r2, [r3, #8]
  led->init.Mode = GPIO_MODE_OUTPUT_PP;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	60da      	str	r2, [r3, #12]
  led->init.Pull = GPIO_NOPULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	611a      	str	r2, [r3, #16]
  led->init.Speed = GPIO_SPEED_FAST;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2202      	movs	r2, #2
 800364c:	615a      	str	r2, [r3, #20]
  HAL_GPIO_Init(led->port, &led->init);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3308      	adds	r3, #8
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7fe fc53 	bl	8001f04 <HAL_GPIO_Init>

  LED_SetActiveMode(led, LED_ACTIVE_HIGH);
 800365e:	2101      	movs	r1, #1
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f81b 	bl	800369c <LED_SetActiveMode>
  LED_Write(led, GPIO_PIN_RESET);
 8003666:	2100      	movs	r1, #0
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f833 	bl	80036d4 <LED_Write>
  return (HAL_OK);
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400
 8003680:	40020800 	.word	0x40020800
 8003684:	40020c00 	.word	0x40020c00
 8003688:	40021000 	.word	0x40021000
 800368c:	40021400 	.word	0x40021400
 8003690:	40021800 	.word	0x40021800
 8003694:	40021c00 	.word	0x40021c00
 8003698:	08003928 	.word	0x08003928

0800369c <LED_SetActiveMode>:
 * @param led Pointer to Led handle
 * @param state The new mode
 * @return HAL Status
 */
HAL_StatusTypeDef LED_SetActiveMode(struct Led *led, enum LedActiveMode mode)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(led);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <LED_SetActiveMode+0x18>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e009      	b.n	80036c8 <LED_SetActiveMode+0x2c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
  led->active_mode = mode;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	775a      	strb	r2, [r3, #29]
  __HAL_UNLOCK(led);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]

  return (HAL_OK);
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LED_Write>:
 * @param led Pointer to Led handle
 * @param state The new led state
 * @return HAL Status
 */
HAL_StatusTypeDef LED_Write(struct Led *led, GPIO_PinState state)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(led);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <LED_Write+0x18>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e01d      	b.n	8003728 <LED_Write+0x54>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
  /* Check active mode */
  if (led->active_mode == LED_ACTIVE_LOW) {
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7f5b      	ldrb	r3, [r3, #29]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <LED_Write+0x34>
    state = !state;
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	70fb      	strb	r3, [r7, #3]
  }
  /* Write the new state */
  HAL_GPIO_WritePin(led->port, GPIO_PIN(led->pin_num), state);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6858      	ldr	r0, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7f1b      	ldrb	r3, [r3, #28]
 8003710:	461a      	mov	r2, r3
 8003712:	2301      	movs	r3, #1
 8003714:	4093      	lsls	r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	4619      	mov	r1, r3
 800371c:	f7fe ff16 	bl	800254c <HAL_GPIO_WritePin>
  __HAL_UNLOCK(led);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]

  return (HAL_OK);
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d0d      	ldr	r5, [pc, #52]	; (8003768 <__libc_init_array+0x38>)
 8003734:	4c0d      	ldr	r4, [pc, #52]	; (800376c <__libc_init_array+0x3c>)
 8003736:	1b64      	subs	r4, r4, r5
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	2600      	movs	r6, #0
 800373c:	42a6      	cmp	r6, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	4d0b      	ldr	r5, [pc, #44]	; (8003770 <__libc_init_array+0x40>)
 8003742:	4c0c      	ldr	r4, [pc, #48]	; (8003774 <__libc_init_array+0x44>)
 8003744:	f000 f83c 	bl	80037c0 <_init>
 8003748:	1b64      	subs	r4, r4, r5
 800374a:	10a4      	asrs	r4, r4, #2
 800374c:	2600      	movs	r6, #0
 800374e:	42a6      	cmp	r6, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	f855 3b04 	ldr.w	r3, [r5], #4
 8003758:	4798      	blx	r3
 800375a:	3601      	adds	r6, #1
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003762:	4798      	blx	r3
 8003764:	3601      	adds	r6, #1
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	08003974 	.word	0x08003974
 800376c:	08003974 	.word	0x08003974
 8003770:	08003974 	.word	0x08003974
 8003774:	08003978 	.word	0x08003978

08003778 <memcmp>:
 8003778:	b530      	push	{r4, r5, lr}
 800377a:	3901      	subs	r1, #1
 800377c:	2400      	movs	r4, #0
 800377e:	42a2      	cmp	r2, r4
 8003780:	d101      	bne.n	8003786 <memcmp+0xe>
 8003782:	2000      	movs	r0, #0
 8003784:	e005      	b.n	8003792 <memcmp+0x1a>
 8003786:	5d03      	ldrb	r3, [r0, r4]
 8003788:	3401      	adds	r4, #1
 800378a:	5d0d      	ldrb	r5, [r1, r4]
 800378c:	42ab      	cmp	r3, r5
 800378e:	d0f6      	beq.n	800377e <memcmp+0x6>
 8003790:	1b58      	subs	r0, r3, r5
 8003792:	bd30      	pop	{r4, r5, pc}

08003794 <memcpy>:
 8003794:	440a      	add	r2, r1
 8003796:	4291      	cmp	r1, r2
 8003798:	f100 33ff 	add.w	r3, r0, #4294967295
 800379c:	d100      	bne.n	80037a0 <memcpy+0xc>
 800379e:	4770      	bx	lr
 80037a0:	b510      	push	{r4, lr}
 80037a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037aa:	4291      	cmp	r1, r2
 80037ac:	d1f9      	bne.n	80037a2 <memcpy+0xe>
 80037ae:	bd10      	pop	{r4, pc}

080037b0 <memset>:
 80037b0:	4402      	add	r2, r0
 80037b2:	4603      	mov	r3, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <memset+0xa>
 80037b8:	4770      	bx	lr
 80037ba:	f803 1b01 	strb.w	r1, [r3], #1
 80037be:	e7f9      	b.n	80037b4 <memset+0x4>

080037c0 <_init>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	bf00      	nop
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr

080037cc <_fini>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr
