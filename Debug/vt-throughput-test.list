
vt-throughput-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000355c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b4  080038b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038bc  080038bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000010  080038d4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080038d4  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000927e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002030  00000000  00000000  000292be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  0002ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021365  00000000  00000000  0002c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1e4  00000000  00000000  0004d38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5a3e  00000000  00000000  00058571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011dfaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001968  00000000  00000000  0011e004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003708 	.word	0x08003708

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003708 	.word	0x08003708

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <TS_DMA_Init>:
static void _TransferComplete(DMA_HandleTypeDef *hdma);
static void _TransferError(DMA_HandleTypeDef *hdma);

/* Public function definitions */
void TS_DMA_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  HAL_DMA_RegisterCallback(hdma, HAL_DMA_XFER_CPLT_CB_ID, _TransferComplete);
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <TS_DMA_Init+0x24>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <TS_DMA_Init+0x28>)
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f001 fb77 	bl	8001bfc <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(hdma, HAL_DMA_XFER_ERROR_CB_ID, _TransferError);
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <TS_DMA_Init+0x24>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <TS_DMA_Init+0x2c>)
 8000514:	2104      	movs	r1, #4
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fb70 	bl	8001bfc <HAL_DMA_RegisterCallback>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000000 	.word	0x20000000
 8000524:	080008e1 	.word	0x080008e1
 8000528:	08000901 	.word	0x08000901

0800052c <TS_DMA_Transfer>:

void TS_DMA_Transfer(void *DstAddr, void *SrcAddr, uint16_t Size)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	4613      	mov	r3, r2
 8000538:	80fb      	strh	r3, [r7, #6]
  /* Start */
  HAL_DMA_Start_IT(hdma, (uint32_t) SrcAddr, (uint32_t) DstAddr, Size);
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <TS_DMA_Transfer+0x38>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	68b9      	ldr	r1, [r7, #8]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	f001 f96a 	bl	800181c <HAL_DMA_Start_IT>
  while (!transferComplete && !transferError);
 8000548:	bf00      	nop
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <TS_DMA_Transfer+0x3c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d103      	bne.n	800055a <TS_DMA_Transfer+0x2e>
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <TS_DMA_Transfer+0x40>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f7      	beq.n	800054a <TS_DMA_Transfer+0x1e>
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	20000030 	.word	0x20000030
 800056c:	2000002c 	.word	0x2000002c

08000570 <TS_DMA_ResetFlags>:

void TS_DMA_ResetFlags(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  transferComplete = 0;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <TS_DMA_ResetFlags+0x1c>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
  transferError = 0;
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <TS_DMA_ResetFlags+0x20>)
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000030 	.word	0x20000030
 8000590:	2000002c 	.word	0x2000002c

08000594 <TS_DMA_byte>:

void TS_DMA_byte(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <TS_DMA_byte+0x2c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <TS_DMA_byte+0x2c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <TS_DMA_byte+0x2c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DMA_Init(hdma);
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <TS_DMA_byte+0x2c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 ff15 	bl	80013e4 <HAL_DMA_Init>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000

080005c4 <TS_DMA_halfword>:

void TS_DMA_halfword(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <TS_DMA_halfword+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005d0:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <TS_DMA_halfword+0x30>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005da:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <TS_DMA_halfword+0x30>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2200      	movs	r2, #0
 80005e2:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DMA_Init(hdma);
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <TS_DMA_halfword+0x30>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fefb 	bl	80013e4 <HAL_DMA_Init>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000

080005f8 <TS_DMA_word>:

void TS_DMA_word(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <TS_DMA_word+0x30>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000604:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <TS_DMA_word+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800060e:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <TS_DMA_word+0x30>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DMA_Init(hdma);
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <TS_DMA_word+0x30>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fee1 	bl	80013e4 <HAL_DMA_Init>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000

0800062c <TS_DMA_byte_fifo>:

void TS_DMA_byte_fifo(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2204      	movs	r2, #4
 8000646:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2203      	movs	r2, #3
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_SINGLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <TS_DMA_byte_fifo+0x44>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 febd 	bl	80013e4 <HAL_DMA_Init>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000

08000674 <TS_DMA_halfword_fifo>:

void TS_DMA_halfword_fifo(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000680:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800068a:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2204      	movs	r2, #4
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2203      	movs	r2, #3
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_SINGLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_PBURST_SINGLE;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <TS_DMA_halfword_fifo+0x48>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fe97 	bl	80013e4 <HAL_DMA_Init>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000

080006c0 <TS_DMA_word_fifo>:

void TS_DMA_word_fifo(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006cc:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006d6:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2204      	movs	r2, #4
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2203      	movs	r2, #3
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_SINGLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_PBURST_SINGLE;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <TS_DMA_word_fifo+0x48>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fe71 	bl	80013e4 <HAL_DMA_Init>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000

0800070c <TS_DMA_byte_fifo_inc4>:

void TS_DMA_byte_fifo_inc4(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2204      	movs	r2, #4
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2203      	movs	r2, #3
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC4;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC4;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <TS_DMA_byte_fifo_inc4+0x48>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fe4b 	bl	80013e4 <HAL_DMA_Init>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000000 	.word	0x20000000

08000758 <TS_DMA_byte_fifo_inc8>:

void TS_DMA_byte_fifo_inc8(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2204      	movs	r2, #4
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2203      	movs	r2, #3
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC8;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC8;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <TS_DMA_byte_fifo_inc8+0x48>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fe25 	bl	80013e4 <HAL_DMA_Init>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000000 	.word	0x20000000

080007a4 <TS_DMA_byte_fifo_inc16>:

void TS_DMA_byte_fifo_inc16(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2204      	movs	r2, #4
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2203      	movs	r2, #3
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC16;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC16;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <TS_DMA_byte_fifo_inc16+0x48>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fdff 	bl	80013e4 <HAL_DMA_Init>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000

080007f0 <TS_DMA_halfword_fifo_inc4>:

void TS_DMA_halfword_fifo_inc4(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007fc:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000806:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2204      	movs	r2, #4
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2203      	movs	r2, #3
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC4;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC4;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <TS_DMA_halfword_fifo_inc4+0x4c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fdd7 	bl	80013e4 <HAL_DMA_Init>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000000 	.word	0x20000000

08000840 <TS_DMA_halfword_fifo_inc8>:

void TS_DMA_halfword_fifo_inc8(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800084c:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000856:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2204      	movs	r2, #4
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2203      	movs	r2, #3
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC8;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC8;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <TS_DMA_halfword_fifo_inc8+0x4c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fdaf 	bl	80013e4 <HAL_DMA_Init>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000

08000890 <TS_DMA_word_fifo_inc4>:

void TS_DMA_word_fifo_inc4(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  hdma->Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	615a      	str	r2, [r3, #20]
  hdma->Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a6:	619a      	str	r2, [r3, #24]
  hdma->Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2204      	movs	r2, #4
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hdma->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2203      	movs	r2, #3
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->Init.MemBurst = DMA_MBURST_INC4;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->Init.PeriphBurst = DMA_MBURST_INC4;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Init(hdma);
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <TS_DMA_word_fifo_inc4+0x4c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fd87 	bl	80013e4 <HAL_DMA_Init>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000

080008e0 <_TransferComplete>:

/* DMA Interrupt Callbacks */
static void _TransferComplete(DMA_HandleTypeDef *hdma)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  transferComplete = 1;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <_TransferComplete+0x1c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000030 	.word	0x20000030

08000900 <_TransferError>:

static void _TransferError(DMA_HandleTypeDef *hdma)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  transferError = 1;
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <_TransferError+0x1c>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	2000002c 	.word	0x2000002c

08000920 <DWT_Init>:

#include "stm32f4xx_hal.h"

/* Public function declarations & definitions */
__STATIC_INLINE void DWT_Init(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <DWT_Init+0x2c>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <DWT_Init+0x2c>)
 800092a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092e:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <DWT_Init+0x30>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <DWT_Init+0x30>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <DWT_Init+0x30>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6013      	str	r3, [r2, #0]
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000edf0 	.word	0xe000edf0
 8000950:	e0001000 	.word	0xe0001000

08000954 <DWT_DeInit>:

__STATIC_INLINE void DWT_DeInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <DWT_DeInit+0x2c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <DWT_DeInit+0x2c>)
 800095e:	f023 0301 	bic.w	r3, r3, #1
 8000962:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <DWT_DeInit+0x2c>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <DWT_DeInit+0x30>)
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <DWT_DeInit+0x30>)
 8000970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000974:	60d3      	str	r3, [r2, #12]
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e0001000 	.word	0xe0001000
 8000984:	e000edf0 	.word	0xe000edf0

08000988 <DWT_GetCounter>:
  DWT_DeInit();
  DWT_Init();
}

__STATIC_INLINE uint32_t DWT_GetCounter(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <DWT_GetCounter+0x14>)
 800098e:	685b      	ldr	r3, [r3, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e0001000 	.word	0xe0001000

080009a0 <Throughput_Init>:
                                           void *SrcAddr,
                                           uint16_t Size);

/* Public function definitions */
HAL_StatusTypeDef Throughput_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  TS_DMA_Init();
 80009a4:	f7ff fdaa 	bl	80004fc <TS_DMA_Init>

  /* Initiate testers */
  _register_tester(TEST_MEMCPY, _memcpy_transfer, NULL);
 80009a8:	2200      	movs	r2, #0
 80009aa:	4921      	ldr	r1, [pc, #132]	; (8000a30 <Throughput_Init+0x90>)
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 f921 	bl	8000bf4 <_register_tester>

  _register_tester(TEST_DMA_BYTE, TS_DMA_Transfer, TS_DMA_byte);
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <Throughput_Init+0x94>)
 80009b4:	4920      	ldr	r1, [pc, #128]	; (8000a38 <Throughput_Init+0x98>)
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 f91c 	bl	8000bf4 <_register_tester>
  _register_tester(TEST_DMA_HALFWORD, TS_DMA_Transfer, TS_DMA_halfword);
 80009bc:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <Throughput_Init+0x9c>)
 80009be:	491e      	ldr	r1, [pc, #120]	; (8000a38 <Throughput_Init+0x98>)
 80009c0:	2002      	movs	r0, #2
 80009c2:	f000 f917 	bl	8000bf4 <_register_tester>
  _register_tester(TEST_DMA_WORD, TS_DMA_Transfer, TS_DMA_word);
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <Throughput_Init+0xa0>)
 80009c8:	491b      	ldr	r1, [pc, #108]	; (8000a38 <Throughput_Init+0x98>)
 80009ca:	2003      	movs	r0, #3
 80009cc:	f000 f912 	bl	8000bf4 <_register_tester>

  _register_tester(TEST_DMA_BYTE_FIFO, TS_DMA_Transfer, TS_DMA_byte_fifo);
 80009d0:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <Throughput_Init+0xa4>)
 80009d2:	4919      	ldr	r1, [pc, #100]	; (8000a38 <Throughput_Init+0x98>)
 80009d4:	2004      	movs	r0, #4
 80009d6:	f000 f90d 	bl	8000bf4 <_register_tester>
  _register_tester(TEST_DMA_HALFWORD_FIFO,
 80009da:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <Throughput_Init+0xa8>)
 80009dc:	4916      	ldr	r1, [pc, #88]	; (8000a38 <Throughput_Init+0x98>)
 80009de:	2005      	movs	r0, #5
 80009e0:	f000 f908 	bl	8000bf4 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_halfword_fifo);
  _register_tester(TEST_DMA_WORD_FIFO, TS_DMA_Transfer, TS_DMA_word_fifo);
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <Throughput_Init+0xac>)
 80009e6:	4914      	ldr	r1, [pc, #80]	; (8000a38 <Throughput_Init+0x98>)
 80009e8:	2006      	movs	r0, #6
 80009ea:	f000 f903 	bl	8000bf4 <_register_tester>

  _register_tester(TEST_DMA_BYTE_FIFO_INC4,
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <Throughput_Init+0xb0>)
 80009f0:	4911      	ldr	r1, [pc, #68]	; (8000a38 <Throughput_Init+0x98>)
 80009f2:	2007      	movs	r0, #7
 80009f4:	f000 f8fe 	bl	8000bf4 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_byte_fifo_inc4);
  _register_tester(TEST_DMA_BYTE_FIFO_INC8,
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <Throughput_Init+0xb4>)
 80009fa:	490f      	ldr	r1, [pc, #60]	; (8000a38 <Throughput_Init+0x98>)
 80009fc:	2008      	movs	r0, #8
 80009fe:	f000 f8f9 	bl	8000bf4 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_byte_fifo_inc8);
  _register_tester(TEST_DMA_BYTE_FIFO_INC16,
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <Throughput_Init+0xb8>)
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <Throughput_Init+0x98>)
 8000a06:	2009      	movs	r0, #9
 8000a08:	f000 f8f4 	bl	8000bf4 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_byte_fifo_inc16);

  _register_tester(TEST_DMA_HALFWORD_FIFO_INC4,
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <Throughput_Init+0xbc>)
 8000a0e:	490a      	ldr	r1, [pc, #40]	; (8000a38 <Throughput_Init+0x98>)
 8000a10:	200a      	movs	r0, #10
 8000a12:	f000 f8ef 	bl	8000bf4 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_halfword_fifo_inc4);
  _register_tester(TEST_DMA_HALFWORD_FIFO_INC8,
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <Throughput_Init+0xc0>)
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <Throughput_Init+0x98>)
 8000a1a:	200b      	movs	r0, #11
 8000a1c:	f000 f8ea 	bl	8000bf4 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_halfword_fifo_inc8);

  _register_tester(TEST_DMA_WORD_FIFO_INC4,
 8000a20:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <Throughput_Init+0xc4>)
 8000a22:	4905      	ldr	r1, [pc, #20]	; (8000a38 <Throughput_Init+0x98>)
 8000a24:	200c      	movs	r0, #12
 8000a26:	f000 f8e5 	bl	8000bf4 <_register_tester>
                   TS_DMA_Transfer,
                   TS_DMA_word_fifo_inc4);

  return (HAL_OK);
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08000c35 	.word	0x08000c35
 8000a34:	08000595 	.word	0x08000595
 8000a38:	0800052d 	.word	0x0800052d
 8000a3c:	080005c5 	.word	0x080005c5
 8000a40:	080005f9 	.word	0x080005f9
 8000a44:	0800062d 	.word	0x0800062d
 8000a48:	08000675 	.word	0x08000675
 8000a4c:	080006c1 	.word	0x080006c1
 8000a50:	0800070d 	.word	0x0800070d
 8000a54:	08000759 	.word	0x08000759
 8000a58:	080007a5 	.word	0x080007a5
 8000a5c:	080007f1 	.word	0x080007f1
 8000a60:	08000841 	.word	0x08000841
 8000a64:	08000891 	.word	0x08000891

08000a68 <Throughput_Test>:

HAL_StatusTypeDef Throughput_Test(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  struct Tester *ts;
  uint16_t i, j;

  for (i = 0; i < TEST_CNT; i++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	80fb      	strh	r3, [r7, #6]
 8000a72:	e03c      	b.n	8000aee <Throughput_Test+0x86>
    ts = &Testers[i];
 8000a74:	88fa      	ldrh	r2, [r7, #6]
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <Throughput_Test+0x98>)
 8000a80:	4413      	add	r3, r2
 8000a82:	603b      	str	r3, [r7, #0]

    /* Skip if un-registered */
    if (ts->transfer == NULL) {
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d02c      	beq.n	8000ae6 <Throughput_Test+0x7e>
      continue;
    }

    /* Configure tester */
    if (ts->configure != NULL) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <Throughput_Test+0x32>
      ts->configure();
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	4798      	blx	r3
    }

    /* Test routines */
    _flush(&ts->cycle);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f891 	bl	8000bc4 <_flush>
    for (j = 0; j < ITERATION_CNT; j++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	80bb      	strh	r3, [r7, #4]
 8000aa6:	e005      	b.n	8000ab4 <Throughput_Test+0x4c>
      _test(ts);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f000 f82d 	bl	8000b08 <_test>
    for (j = 0; j < ITERATION_CNT; j++) {
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	80bb      	strh	r3, [r7, #4]
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d9f4      	bls.n	8000aa8 <Throughput_Test+0x40>
    }
    _average(&ts->cycle);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f869 	bl	8000b98 <_average>

    /* Indicators */
    LED_Write(&hled, 1);
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	480e      	ldr	r0, [pc, #56]	; (8000b04 <Throughput_Test+0x9c>)
 8000aca:	f002 fda7 	bl	800361c <LED_Write>
    HAL_Delay(500);
 8000ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad2:	f000 fb23 	bl	800111c <HAL_Delay>
    LED_Write(&hled, 0);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <Throughput_Test+0x9c>)
 8000ada:	f002 fd9f 	bl	800361c <LED_Write>
    HAL_Delay(50);
 8000ade:	2032      	movs	r0, #50	; 0x32
 8000ae0:	f000 fb1c 	bl	800111c <HAL_Delay>
 8000ae4:	e000      	b.n	8000ae8 <Throughput_Test+0x80>
      continue;
 8000ae6:	bf00      	nop
  for (i = 0; i < TEST_CNT; i++) {
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	3301      	adds	r3, #1
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	2b0c      	cmp	r3, #12
 8000af2:	d9bf      	bls.n	8000a74 <Throughput_Test+0xc>
  }

  return (HAL_OK);
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000038 	.word	0x20000038
 8000b04:	200001d0 	.word	0x200001d0

08000b08 <_test>:

/* Private function definitions */
static HAL_StatusTypeDef _test(struct Tester *ts)
{
 8000b08:	b5b0      	push	{r4, r5, r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t cycles;

  /* Prepare data */
  memset(SRAM1_ADDR, 0x55, BUF_SIZE);
 8000b10:	f240 720a 	movw	r2, #1802	; 0x70a
 8000b14:	2155      	movs	r1, #85	; 0x55
 8000b16:	481e      	ldr	r0, [pc, #120]	; (8000b90 <_test+0x88>)
 8000b18:	f002 fdee 	bl	80036f8 <memset>
  memset(SRAM2_ADDR, 0x00, BUF_SIZE);
 8000b1c:	f240 720a 	movw	r2, #1802	; 0x70a
 8000b20:	2100      	movs	r1, #0
 8000b22:	481c      	ldr	r0, [pc, #112]	; (8000b94 <_test+0x8c>)
 8000b24:	f002 fde8 	bl	80036f8 <memset>

  TS_DMA_ResetFlags();
 8000b28:	f7ff fd22 	bl	8000570 <TS_DMA_ResetFlags>

  /* Transfer data */
  DWT_Init();
 8000b2c:	f7ff fef8 	bl	8000920 <DWT_Init>
  ts->transfer(SRAM2_ADDR, SRAM1_ADDR, BUF_SIZE);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f240 720a 	movw	r2, #1802	; 0x70a
 8000b38:	4915      	ldr	r1, [pc, #84]	; (8000b90 <_test+0x88>)
 8000b3a:	4816      	ldr	r0, [pc, #88]	; (8000b94 <_test+0x8c>)
 8000b3c:	4798      	blx	r3
  cycles = DWT_GetCounter();
 8000b3e:	f7ff ff23 	bl	8000988 <DWT_GetCounter>
 8000b42:	60f8      	str	r0, [r7, #12]
  DWT_DeInit();
 8000b44:	f7ff ff06 	bl	8000954 <DWT_DeInit>

  /* Compare data */
  if (memcmp(SRAM1_ADDR, SRAM2_ADDR, BUF_SIZE) == 0) {
 8000b48:	f240 720a 	movw	r2, #1802	; 0x70a
 8000b4c:	4911      	ldr	r1, [pc, #68]	; (8000b94 <_test+0x8c>)
 8000b4e:	4810      	ldr	r0, [pc, #64]	; (8000b90 <_test+0x88>)
 8000b50:	f002 fdb6 	bl	80036c0 <memcmp>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d114      	bne.n	8000b84 <_test+0x7c>
    ts->cycle.total += cycles;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	461a      	mov	r2, r3
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	1884      	adds	r4, r0, r2
 8000b6a:	eb41 0503 	adc.w	r5, r1, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	e9c3 4500 	strd	r4, r5, [r3]
    ts->cycle.count++;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	891b      	ldrh	r3, [r3, #8]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	811a      	strh	r2, [r3, #8]

    return (HAL_OK);
 8000b80:	2300      	movs	r3, #0
 8000b82:	e000      	b.n	8000b86 <_test+0x7e>
  }
  return (HAL_ERROR);
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20018000 	.word	0x20018000
 8000b94:	2001c000 	.word	0x2001c000

08000b98 <_average>:

static inline void _average(struct TestCycle *tc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  tc->average = tc->total / tc->count;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	891b      	ldrh	r3, [r3, #8]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	f7ff fb28 	bl	8000204 <__aeabi_uldivmod>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	60da      	str	r2, [r3, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_flush>:

static inline void _flush(struct TestCycle *tc)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  tc->count = 0;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	811a      	strh	r2, [r3, #8]
  tc->total = 0;
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e9c1 2300 	strd	r2, r3, [r1]
  tc->average = 0;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <_register_tester>:

static struct Tester* _register_tester(enum TEST_NAME ts_name,
                                       void (*transfer)(void*, void*, uint16_t),
                                       void (*configure)(void))
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	73fb      	strb	r3, [r7, #15]
  struct Tester *ts = &Testers[ts_name];
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <_register_tester+0x3c>)
 8000c0e:	4413      	add	r3, r2
 8000c10:	617b      	str	r3, [r7, #20]

  _flush(&ts->cycle);
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ffd5 	bl	8000bc4 <_flush>
  ts->transfer = transfer;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	615a      	str	r2, [r3, #20]
  ts->configure = configure;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	611a      	str	r2, [r3, #16]

  return (ts);
 8000c26:	697b      	ldr	r3, [r7, #20]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000038 	.word	0x20000038

08000c34 <_memcpy_transfer>:

__STATIC_FORCEINLINE void _memcpy_transfer(void *DstAddr,
                                           void *SrcAddr,
                                           uint16_t Size)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	80fb      	strh	r3, [r7, #6]
  memcpy(DstAddr, SrcAddr, Size);
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	461a      	mov	r2, r3
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f002 fd47 	bl	80036dc <memcpy>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MX_DMA_Init+0x9c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <MX_DMA_Init+0x9c>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_DMA_Init+0x9c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <MX_DMA_Init+0xa4>)
 8000c7e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c92:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <MX_DMA_Init+0xa0>)
 8000cce:	f000 fb89 	bl	80013e4 <HAL_DMA_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_DMA_Init+0x84>
  {
    Error_Handler();
 8000cd8:	f000 f906 	bl	8000ee8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2038      	movs	r0, #56	; 0x38
 8000ce2:	f000 fb2f 	bl	8001344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ce6:	2038      	movs	r0, #56	; 0x38
 8000ce8:	f000 fb58 	bl	800139c <HAL_NVIC_EnableIRQ>

}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	20000170 	.word	0x20000170
 8000cfc:	40026410 	.word	0x40026410

08000d00 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_GPIO_Init+0xb0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d86:	230c      	movs	r3, #12
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d96:	2307      	movs	r3, #7
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_GPIO_Init+0xb4>)
 8000da2:	f001 f85f 	bl	8001e64 <HAL_GPIO_Init>

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f000 f93c 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f820 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f7ff ff9c 	bl	8000d00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dc8:	f7ff ff46 	bl	8000c58 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  LED_Init(&hled, GPIOA, 5);
 8000dcc:	2205      	movs	r2, #5
 8000dce:	490b      	ldr	r1, [pc, #44]	; (8000dfc <main+0x44>)
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <main+0x48>)
 8000dd2:	f002 fb7b 	bl	80034cc <LED_Init>
  Throughput_Init();
 8000dd6:	f7ff fde3 	bl	80009a0 <Throughput_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Throughput_Test();
 8000dda:	f7ff fe45 	bl	8000a68 <Throughput_Test>

  while (1) {
    LED_Write(&hled, 1);
 8000dde:	2101      	movs	r1, #1
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <main+0x48>)
 8000de2:	f002 fc1b 	bl	800361c <LED_Write>
    HAL_Delay(50);
 8000de6:	2032      	movs	r0, #50	; 0x32
 8000de8:	f000 f998 	bl	800111c <HAL_Delay>
    LED_Write(&hled, 0);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <main+0x48>)
 8000df0:	f002 fc14 	bl	800361c <LED_Write>
    HAL_Delay(50);
 8000df4:	2032      	movs	r0, #50	; 0x32
 8000df6:	f000 f991 	bl	800111c <HAL_Delay>
    LED_Write(&hled, 1);
 8000dfa:	e7f0      	b.n	8000dde <main+0x26>
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	200001d0 	.word	0x200001d0

08000e04 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2234      	movs	r2, #52	; 0x34
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fc70 	bl	80036f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	2300      	movs	r3, #0
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e78:	23b4      	movs	r3, #180	; 0xb4
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fee7 	bl	8002c60 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x98>
    Error_Handler();
 8000e98:	f000 f826 	bl	8000ee8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000e9c:	f001 fb38 	bl	8002510 <HAL_PWREx_EnableOverDrive>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xa6>
    Error_Handler();
 8000ea6:	f000 f81f 	bl	8000ee8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	60bb      	str	r3, [r7, #8]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2105      	movs	r1, #5
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fb71 	bl	80025b0 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xd4>
    Error_Handler();
 8000ed4:	f000 f808 	bl	8000ee8 <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000ef0:	e7fe      	b.n	8000ef0 <Error_Handler+0x8>

08000ef2 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f46:	2007      	movs	r0, #7
 8000f48:	f000 f9dc 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f89a 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA2_Stream0_IRQHandler+0x10>)
 8000fb2:	f000 fc99 	bl	80018e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000170 	.word	0x20000170

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100e:	f7ff ffd7 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 fb31 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fecf 	bl	8000db8 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001028:	080038c4 	.word	0x080038c4
  ldr r2, =_sbss
 800102c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001030:	200001f4 	.word	0x200001f4

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f94f 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff ff4c 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f996 	bl	80013cc <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f944 	bl	8001344 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000004 	.word	0x20000004
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	20000008 	.word	0x20000008

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000000c 	.word	0x2000000c
 8001100:	200001f0 	.word	0x200001f0

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200001f0 	.word	0x200001f0

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000000c 	.word	0x2000000c

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b07      	cmp	r3, #7
 8001310:	d00f      	beq.n	8001332 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b06      	cmp	r3, #6
 8001316:	d00c      	beq.n	8001332 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d009      	beq.n	8001332 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d006      	beq.n	8001332 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d003      	beq.n	8001332 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800132a:	2192      	movs	r1, #146	; 0x92
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800132e:	f7ff fde0 	bl	8000ef2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff16 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	08003720 	.word	0x08003720

08001344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d903      	bls.n	8001364 <HAL_NVIC_SetPriority+0x20>
 800135c:	21aa      	movs	r1, #170	; 0xaa
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <HAL_NVIC_SetPriority+0x54>)
 8001360:	f7ff fdc7 	bl	8000ef2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	d903      	bls.n	8001372 <HAL_NVIC_SetPriority+0x2e>
 800136a:	21ab      	movs	r1, #171	; 0xab
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <HAL_NVIC_SetPriority+0x54>)
 800136e:	f7ff fdc0 	bl	8000ef2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001372:	f7ff ff1b 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001376:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	6978      	ldr	r0, [r7, #20]
 800137e:	f7ff ff6b 	bl	8001258 <NVIC_EncodePriority>
 8001382:	4602      	mov	r2, r0
 8001384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff3a 	bl	8001204 <__NVIC_SetPriority>
}
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	08003720 	.word	0x08003720

0800139c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da03      	bge.n	80013b6 <HAL_NVIC_EnableIRQ+0x1a>
 80013ae:	21be      	movs	r1, #190	; 0xbe
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_NVIC_EnableIRQ+0x2c>)
 80013b2:	f7ff fd9e 	bl	8000ef2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff04 	bl	80011c8 <__NVIC_EnableIRQ>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	08003720 	.word	0x08003720

080013cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff73 	bl	80012c0 <SysTick_Config>
 80013da:	4603      	mov	r3, r0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff fe88 	bl	8001104 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e204      	b.n	800180a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a97      	ldr	r2, [pc, #604]	; (8001664 <HAL_DMA_Init+0x280>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d04e      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a96      	ldr	r2, [pc, #600]	; (8001668 <HAL_DMA_Init+0x284>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d049      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a94      	ldr	r2, [pc, #592]	; (800166c <HAL_DMA_Init+0x288>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d044      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a93      	ldr	r2, [pc, #588]	; (8001670 <HAL_DMA_Init+0x28c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d03f      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a91      	ldr	r2, [pc, #580]	; (8001674 <HAL_DMA_Init+0x290>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d03a      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a90      	ldr	r2, [pc, #576]	; (8001678 <HAL_DMA_Init+0x294>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d035      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a8e      	ldr	r2, [pc, #568]	; (800167c <HAL_DMA_Init+0x298>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d030      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a8d      	ldr	r2, [pc, #564]	; (8001680 <HAL_DMA_Init+0x29c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d02b      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a8b      	ldr	r2, [pc, #556]	; (8001684 <HAL_DMA_Init+0x2a0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d026      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a8a      	ldr	r2, [pc, #552]	; (8001688 <HAL_DMA_Init+0x2a4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d021      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a88      	ldr	r2, [pc, #544]	; (800168c <HAL_DMA_Init+0x2a8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01c      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a87      	ldr	r2, [pc, #540]	; (8001690 <HAL_DMA_Init+0x2ac>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d017      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a85      	ldr	r2, [pc, #532]	; (8001694 <HAL_DMA_Init+0x2b0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d012      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a84      	ldr	r2, [pc, #528]	; (8001698 <HAL_DMA_Init+0x2b4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d00d      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a82      	ldr	r2, [pc, #520]	; (800169c <HAL_DMA_Init+0x2b8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d008      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a81      	ldr	r2, [pc, #516]	; (80016a0 <HAL_DMA_Init+0x2bc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d003      	beq.n	80014a8 <HAL_DMA_Init+0xc4>
 80014a0:	21b8      	movs	r1, #184	; 0xb8
 80014a2:	4880      	ldr	r0, [pc, #512]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 80014a4:	f7ff fd25 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d026      	beq.n	80014fe <HAL_DMA_Init+0x11a>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014b8:	d021      	beq.n	80014fe <HAL_DMA_Init+0x11a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014c2:	d01c      	beq.n	80014fe <HAL_DMA_Init+0x11a>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80014cc:	d017      	beq.n	80014fe <HAL_DMA_Init+0x11a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014d6:	d012      	beq.n	80014fe <HAL_DMA_Init+0x11a>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80014e0:	d00d      	beq.n	80014fe <HAL_DMA_Init+0x11a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80014ea:	d008      	beq.n	80014fe <HAL_DMA_Init+0x11a>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80014f4:	d003      	beq.n	80014fe <HAL_DMA_Init+0x11a>
 80014f6:	21b9      	movs	r1, #185	; 0xb9
 80014f8:	486a      	ldr	r0, [pc, #424]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 80014fa:	f7ff fcfa 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <HAL_DMA_Init+0x13a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b40      	cmp	r3, #64	; 0x40
 800150c:	d007      	beq.n	800151e <HAL_DMA_Init+0x13a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b80      	cmp	r3, #128	; 0x80
 8001514:	d003      	beq.n	800151e <HAL_DMA_Init+0x13a>
 8001516:	21ba      	movs	r1, #186	; 0xba
 8001518:	4862      	ldr	r0, [pc, #392]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 800151a:	f7ff fcea 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001526:	d007      	beq.n	8001538 <HAL_DMA_Init+0x154>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_DMA_Init+0x154>
 8001530:	21bb      	movs	r1, #187	; 0xbb
 8001532:	485c      	ldr	r0, [pc, #368]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 8001534:	f7ff fcdd 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001540:	d007      	beq.n	8001552 <HAL_DMA_Init+0x16e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_DMA_Init+0x16e>
 800154a:	21bc      	movs	r1, #188	; 0xbc
 800154c:	4855      	ldr	r0, [pc, #340]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 800154e:	f7ff fcd0 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00d      	beq.n	8001576 <HAL_DMA_Init+0x192>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001562:	d008      	beq.n	8001576 <HAL_DMA_Init+0x192>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156c:	d003      	beq.n	8001576 <HAL_DMA_Init+0x192>
 800156e:	21bd      	movs	r1, #189	; 0xbd
 8001570:	484c      	ldr	r0, [pc, #304]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 8001572:	f7ff fcbe 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00d      	beq.n	800159a <HAL_DMA_Init+0x1b6>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001586:	d008      	beq.n	800159a <HAL_DMA_Init+0x1b6>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001590:	d003      	beq.n	800159a <HAL_DMA_Init+0x1b6>
 8001592:	21be      	movs	r1, #190	; 0xbe
 8001594:	4843      	ldr	r0, [pc, #268]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 8001596:	f7ff fcac 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <HAL_DMA_Init+0x1d8>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015aa:	d007      	beq.n	80015bc <HAL_DMA_Init+0x1d8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d003      	beq.n	80015bc <HAL_DMA_Init+0x1d8>
 80015b4:	21bf      	movs	r1, #191	; 0xbf
 80015b6:	483b      	ldr	r0, [pc, #236]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 80015b8:	f7ff fc9b 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d012      	beq.n	80015ea <HAL_DMA_Init+0x206>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d00d      	beq.n	80015ea <HAL_DMA_Init+0x206>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d6:	d008      	beq.n	80015ea <HAL_DMA_Init+0x206>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015e0:	d003      	beq.n	80015ea <HAL_DMA_Init+0x206>
 80015e2:	21c0      	movs	r1, #192	; 0xc0
 80015e4:	482f      	ldr	r0, [pc, #188]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 80015e6:	f7ff fc84 	bl	8000ef2 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_DMA_Init+0x21e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d003      	beq.n	8001602 <HAL_DMA_Init+0x21e>
 80015fa:	21c1      	movs	r1, #193	; 0xc1
 80015fc:	4829      	ldr	r0, [pc, #164]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 80015fe:	f7ff fc78 	bl	8000ef2 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	2b00      	cmp	r3, #0
 8001608:	d065      	beq.n	80016d6 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00f      	beq.n	8001632 <HAL_DMA_Init+0x24e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	2b01      	cmp	r3, #1
 8001618:	d00b      	beq.n	8001632 <HAL_DMA_Init+0x24e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	2b02      	cmp	r3, #2
 8001620:	d007      	beq.n	8001632 <HAL_DMA_Init+0x24e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	2b03      	cmp	r3, #3
 8001628:	d003      	beq.n	8001632 <HAL_DMA_Init+0x24e>
 800162a:	21c6      	movs	r1, #198	; 0xc6
 800162c:	481d      	ldr	r0, [pc, #116]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 800162e:	f7ff fc60 	bl	8000ef2 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d036      	beq.n	80016a8 <HAL_DMA_Init+0x2c4>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001642:	d031      	beq.n	80016a8 <HAL_DMA_Init+0x2c4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800164c:	d02c      	beq.n	80016a8 <HAL_DMA_Init+0x2c4>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001656:	d027      	beq.n	80016a8 <HAL_DMA_Init+0x2c4>
 8001658:	21c7      	movs	r1, #199	; 0xc7
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <HAL_DMA_Init+0x2c0>)
 800165c:	f7ff fc49 	bl	8000ef2 <assert_failed>
 8001660:	e022      	b.n	80016a8 <HAL_DMA_Init+0x2c4>
 8001662:	bf00      	nop
 8001664:	40026010 	.word	0x40026010
 8001668:	40026028 	.word	0x40026028
 800166c:	40026040 	.word	0x40026040
 8001670:	40026058 	.word	0x40026058
 8001674:	40026070 	.word	0x40026070
 8001678:	40026088 	.word	0x40026088
 800167c:	400260a0 	.word	0x400260a0
 8001680:	400260b8 	.word	0x400260b8
 8001684:	40026410 	.word	0x40026410
 8001688:	40026428 	.word	0x40026428
 800168c:	40026440 	.word	0x40026440
 8001690:	40026458 	.word	0x40026458
 8001694:	40026470 	.word	0x40026470
 8001698:	40026488 	.word	0x40026488
 800169c:	400264a0 	.word	0x400264a0
 80016a0:	400264b8 	.word	0x400264b8
 80016a4:	0800375c 	.word	0x0800375c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d012      	beq.n	80016d6 <HAL_DMA_Init+0x2f2>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016b8:	d00d      	beq.n	80016d6 <HAL_DMA_Init+0x2f2>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c2:	d008      	beq.n	80016d6 <HAL_DMA_Init+0x2f2>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80016cc:	d003      	beq.n	80016d6 <HAL_DMA_Init+0x2f2>
 80016ce:	21c8      	movs	r1, #200	; 0xc8
 80016d0:	4850      	ldr	r0, [pc, #320]	; (8001814 <HAL_DMA_Init+0x430>)
 80016d2:	f7ff fc0e 	bl	8000ef2 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f6:	e00f      	b.n	8001718 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f8:	f7ff fd04 	bl	8001104 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b05      	cmp	r3, #5
 8001704:	d908      	bls.n	8001718 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e078      	b.n	800180a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1e8      	bne.n	80016f8 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4b39      	ldr	r3, [pc, #228]	; (8001818 <HAL_DMA_Init+0x434>)
 8001732:	4013      	ands	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	2b04      	cmp	r3, #4
 8001770:	d107      	bne.n	8001782 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4313      	orrs	r3, r2
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	4313      	orrs	r3, r2
 8001780:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f023 0307 	bic.w	r3, r3, #7
 8001798:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d117      	bne.n	80017dc <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00e      	beq.n	80017dc <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fad4 	bl	8001d6c <DMA_CheckFifoParam>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d008      	beq.n	80017dc <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2240      	movs	r2, #64	; 0x40
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017d8:	2301      	movs	r3, #1
 80017da:	e016      	b.n	800180a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fa8b 	bl	8001d00 <DMA_CalcBaseAndBitshift>
 80017ea:	4603      	mov	r3, r0
 80017ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	223f      	movs	r2, #63	; 0x3f
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800375c 	.word	0x0800375c
 8001818:	f010803f 	.word	0xf010803f

0800181c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_DMA_Start_IT+0x26>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d304      	bcc.n	800184c <HAL_DMA_Start_IT+0x30>
 8001842:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001846:	4827      	ldr	r0, [pc, #156]	; (80018e4 <HAL_DMA_Start_IT+0xc8>)
 8001848:	f7ff fb53 	bl	8000ef2 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_DMA_Start_IT+0x3e>
 8001856:	2302      	movs	r3, #2
 8001858:	e040      	b.n	80018dc <HAL_DMA_Start_IT+0xc0>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d12f      	bne.n	80018ce <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2202      	movs	r2, #2
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fa0e 	bl	8001ca4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	223f      	movs	r2, #63	; 0x3f
 800188e:	409a      	lsls	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0216 	orr.w	r2, r2, #22
 80018a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0208 	orr.w	r2, r2, #8
 80018ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e005      	b.n	80018da <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018d6:	2302      	movs	r3, #2
 80018d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018da:	7dfb      	ldrb	r3, [r7, #23]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	0800375c 	.word	0x0800375c

080018e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018f4:	4b92      	ldr	r3, [pc, #584]	; (8001b40 <HAL_DMA_IRQHandler+0x258>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a92      	ldr	r2, [pc, #584]	; (8001b44 <HAL_DMA_IRQHandler+0x25c>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0a9b      	lsrs	r3, r3, #10
 8001900:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	2208      	movs	r2, #8
 8001914:	409a      	lsls	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01a      	beq.n	8001954 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0204 	bic.w	r2, r2, #4
 800193a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	2208      	movs	r2, #8
 8001942:	409a      	lsls	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	2201      	movs	r2, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d012      	beq.n	800198a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	2201      	movs	r2, #1
 8001978:	409a      	lsls	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	f043 0202 	orr.w	r2, r3, #2
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	2204      	movs	r2, #4
 8001990:	409a      	lsls	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d012      	beq.n	80019c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00b      	beq.n	80019c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	2204      	movs	r2, #4
 80019ae:	409a      	lsls	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b8:	f043 0204 	orr.w	r2, r3, #4
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	2210      	movs	r2, #16
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d043      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d03c      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	2210      	movs	r2, #16
 80019e4:	409a      	lsls	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d018      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d108      	bne.n	8001a18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d024      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
 8001a16:	e01f      	b.n	8001a58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01b      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4798      	blx	r3
 8001a28:	e016      	b.n	8001a58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0208 	bic.w	r2, r2, #8
 8001a46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 808e 	beq.w	8001b86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8086 	beq.w	8001b86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	2220      	movs	r2, #32
 8001a80:	409a      	lsls	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d136      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0216 	bic.w	r2, r2, #22
 8001aa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ab0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <HAL_DMA_IRQHandler+0x1da>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0208 	bic.w	r2, r2, #8
 8001ad0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad6:	223f      	movs	r2, #63	; 0x3f
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d07d      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
        }
        return;
 8001afe:	e078      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01c      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d108      	bne.n	8001b2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d030      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
 8001b2c:	e02b      	b.n	8001b86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d027      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
 8001b3e:	e022      	b.n	8001b86 <HAL_DMA_IRQHandler+0x29e>
 8001b40:	20000004 	.word	0x20000004
 8001b44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0210 	bic.w	r2, r2, #16
 8001b64:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d032      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d022      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d307      	bcc.n	8001bce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f2      	bne.n	8001bb2 <HAL_DMA_IRQHandler+0x2ca>
 8001bcc:	e000      	b.n	8001bd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
 8001bf0:	e000      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bf2:	bf00      	nop
    }
  }
}
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop

08001bfc <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	460b      	mov	r3, r1
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_DMA_RegisterCallback+0x20>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e03c      	b.n	8001c96 <HAL_DMA_RegisterCallback+0x9a>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d129      	bne.n	8001c84 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d829      	bhi.n	8001c8a <HAL_DMA_RegisterCallback+0x8e>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <HAL_DMA_RegisterCallback+0x40>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c5d 	.word	0x08001c5d
 8001c44:	08001c65 	.word	0x08001c65
 8001c48:	08001c6d 	.word	0x08001c6d
 8001c4c:	08001c75 	.word	0x08001c75
 8001c50:	08001c7d 	.word	0x08001c7d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001c5a:	e017      	b.n	8001c8c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001c62:	e013      	b.n	8001c8c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001c6a:	e00f      	b.n	8001c8c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001c72:	e00b      	b.n	8001c8c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001c7a:	e007      	b.n	8001c8c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001c82:	e003      	b.n	8001c8c <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	75fb      	strb	r3, [r7, #23]
 8001c88:	e000      	b.n	8001c8c <HAL_DMA_RegisterCallback+0x90>
      break;
 8001c8a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d108      	bne.n	8001ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ce2:	e007      	b.n	8001cf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3b10      	subs	r3, #16
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <DMA_CalcBaseAndBitshift+0x64>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <DMA_CalcBaseAndBitshift+0x68>)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d909      	bls.n	8001d42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	1d1a      	adds	r2, r3, #4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d40:	e007      	b.n	8001d52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	aaaaaaab 	.word	0xaaaaaaab
 8001d68:	080038ac 	.word	0x080038ac

08001d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d11f      	bne.n	8001dc6 <DMA_CheckFifoParam+0x5a>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d856      	bhi.n	8001e3a <DMA_CheckFifoParam+0xce>
 8001d8c:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <DMA_CheckFifoParam+0x28>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001da5 	.word	0x08001da5
 8001d98:	08001db7 	.word	0x08001db7
 8001d9c:	08001da5 	.word	0x08001da5
 8001da0:	08001e3b 	.word	0x08001e3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d046      	beq.n	8001e3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db4:	e043      	b.n	8001e3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dbe:	d140      	bne.n	8001e42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc4:	e03d      	b.n	8001e42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dce:	d121      	bne.n	8001e14 <DMA_CheckFifoParam+0xa8>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d837      	bhi.n	8001e46 <DMA_CheckFifoParam+0xda>
 8001dd6:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <DMA_CheckFifoParam+0x70>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001df3 	.word	0x08001df3
 8001de4:	08001ded 	.word	0x08001ded
 8001de8:	08001e05 	.word	0x08001e05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      break;
 8001df0:	e030      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d025      	beq.n	8001e4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e02:	e022      	b.n	8001e4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e0c:	d11f      	bne.n	8001e4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e12:	e01c      	b.n	8001e4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d903      	bls.n	8001e22 <DMA_CheckFifoParam+0xb6>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d003      	beq.n	8001e28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e20:	e018      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
      break;
 8001e26:	e015      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      break;
 8001e38:	e00b      	b.n	8001e52 <DMA_CheckFifoParam+0xe6>
      break;
 8001e3a:	bf00      	nop
 8001e3c:	e00a      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e3e:	bf00      	nop
 8001e40:	e008      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e42:	bf00      	nop
 8001e44:	e006      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e46:	bf00      	nop
 8001e48:	e004      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
    }
  } 
  
  return status; 
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a37      	ldr	r2, [pc, #220]	; (8001f5c <HAL_GPIO_Init+0xf8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x5e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <HAL_GPIO_Init+0xfc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01b      	beq.n	8001ec2 <HAL_GPIO_Init+0x5e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a35      	ldr	r2, [pc, #212]	; (8001f64 <HAL_GPIO_Init+0x100>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d017      	beq.n	8001ec2 <HAL_GPIO_Init+0x5e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <HAL_GPIO_Init+0x104>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x5e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a33      	ldr	r2, [pc, #204]	; (8001f6c <HAL_GPIO_Init+0x108>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00f      	beq.n	8001ec2 <HAL_GPIO_Init+0x5e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a32      	ldr	r2, [pc, #200]	; (8001f70 <HAL_GPIO_Init+0x10c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_GPIO_Init+0x5e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <HAL_GPIO_Init+0x110>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x5e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a30      	ldr	r2, [pc, #192]	; (8001f78 <HAL_GPIO_Init+0x114>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x5e>
 8001eba:	21ac      	movs	r1, #172	; 0xac
 8001ebc:	482f      	ldr	r0, [pc, #188]	; (8001f7c <HAL_GPIO_Init+0x118>)
 8001ebe:	f7ff f818 	bl	8000ef2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_GPIO_Init+0x74>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x7c>
 8001ed8:	21ad      	movs	r1, #173	; 0xad
 8001eda:	4828      	ldr	r0, [pc, #160]	; (8001f7c <HAL_GPIO_Init+0x118>)
 8001edc:	f7ff f809 	bl	8000ef2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d035      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d031      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b11      	cmp	r3, #17
 8001ef6:	d02d      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d029      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b12      	cmp	r3, #18
 8001f06:	d025      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001f10:	d020      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001f1a:	d01b      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001f24:	d016      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001f2e:	d011      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001f38:	d00c      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f4c:	21ae      	movs	r1, #174	; 0xae
 8001f4e:	480b      	ldr	r0, [pc, #44]	; (8001f7c <HAL_GPIO_Init+0x118>)
 8001f50:	f7fe ffcf 	bl	8000ef2 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	e289      	b.n	800246e <HAL_GPIO_Init+0x60a>
 8001f5a:	bf00      	nop
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40021400 	.word	0x40021400
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40021c00 	.word	0x40021c00
 8001f7c:	08003794 	.word	0x08003794
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 8265 	bne.w	8002468 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d005      	beq.n	8001fb6 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d144      	bne.n	8002040 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00f      	beq.n	8001fde <HAL_GPIO_Init+0x17a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d00b      	beq.n	8001fde <HAL_GPIO_Init+0x17a>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x17a>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x17a>
 8001fd6:	21c0      	movs	r1, #192	; 0xc0
 8001fd8:	4831      	ldr	r0, [pc, #196]	; (80020a0 <HAL_GPIO_Init+0x23c>)
 8001fda:	f7fe ff8a 	bl	8000ef2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d02b      	beq.n	80020a4 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_GPIO_Init+0x208>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x208>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x208>
 8002064:	21d1      	movs	r1, #209	; 0xd1
 8002066:	480e      	ldr	r0, [pc, #56]	; (80020a0 <HAL_GPIO_Init+0x23c>)
 8002068:	f7fe ff43 	bl	8000ef2 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800209e:	bf00      	nop
 80020a0:	08003794 	.word	0x08003794
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	f040 810c 	bne.w	80022ca <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80e3 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	f000 80de 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80d9 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80d4 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80cf 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80ca 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f000 80c5 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	f000 80c0 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b02      	cmp	r3, #2
 8002108:	f000 80bb 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b02      	cmp	r3, #2
 8002112:	f000 80b6 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b02      	cmp	r3, #2
 800211c:	f000 80b1 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b03      	cmp	r3, #3
 8002126:	f000 80ac 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b04      	cmp	r3, #4
 8002130:	f000 80a7 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b04      	cmp	r3, #4
 800213a:	f000 80a2 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b04      	cmp	r3, #4
 8002144:	f000 809d 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b05      	cmp	r3, #5
 800214e:	f000 8098 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b05      	cmp	r3, #5
 8002158:	f000 8093 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b09      	cmp	r3, #9
 8002162:	f000 808e 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b06      	cmp	r3, #6
 800216c:	f000 8089 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b09      	cmp	r3, #9
 8002176:	f000 8084 	beq.w	8002282 <HAL_GPIO_Init+0x41e>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b07      	cmp	r3, #7
 8002180:	d07f      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b07      	cmp	r3, #7
 8002188:	d07b      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b07      	cmp	r3, #7
 8002190:	d077      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b08      	cmp	r3, #8
 8002198:	d073      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d06f      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d06b      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b09      	cmp	r3, #9
 80021b0:	d067      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b09      	cmp	r3, #9
 80021b8:	d063      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b0a      	cmp	r3, #10
 80021c0:	d05f      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b0a      	cmp	r3, #10
 80021c8:	d05b      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b0b      	cmp	r3, #11
 80021d0:	d057      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d053      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d04f      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b0d      	cmp	r3, #13
 80021e8:	d04b      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	d047      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d043      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d03f      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b06      	cmp	r3, #6
 8002208:	d03b      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d037      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d033      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d02f      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b06      	cmp	r3, #6
 8002228:	d02b      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b06      	cmp	r3, #6
 8002230:	d027      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b07      	cmp	r3, #7
 8002238:	d023      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b07      	cmp	r3, #7
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b07      	cmp	r3, #7
 8002248:	d01b      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b07      	cmp	r3, #7
 8002250:	d017      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b08      	cmp	r3, #8
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b08      	cmp	r3, #8
 8002260:	d00f      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d00b      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b0a      	cmp	r3, #10
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x41e>
 800227a:	21de      	movs	r1, #222	; 0xde
 800227c:	4880      	ldr	r0, [pc, #512]	; (8002480 <HAL_GPIO_Init+0x61c>)
 800227e:	f7fe fe38 	bl	8000ef2 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	69b9      	ldr	r1, [r7, #24]
 80022c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2203      	movs	r2, #3
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0203 	and.w	r2, r3, #3
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80ae 	beq.w	8002468 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	4b5c      	ldr	r3, [pc, #368]	; (8002484 <HAL_GPIO_Init+0x620>)
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	4a5b      	ldr	r2, [pc, #364]	; (8002484 <HAL_GPIO_Init+0x620>)
 8002316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231a:	6453      	str	r3, [r2, #68]	; 0x44
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_GPIO_Init+0x620>)
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002328:	4a57      	ldr	r2, [pc, #348]	; (8002488 <HAL_GPIO_Init+0x624>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a4f      	ldr	r2, [pc, #316]	; (800248c <HAL_GPIO_Init+0x628>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d025      	beq.n	80023a0 <HAL_GPIO_Init+0x53c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <HAL_GPIO_Init+0x62c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d01f      	beq.n	800239c <HAL_GPIO_Init+0x538>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_GPIO_Init+0x630>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d019      	beq.n	8002398 <HAL_GPIO_Init+0x534>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_GPIO_Init+0x634>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_GPIO_Init+0x530>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_GPIO_Init+0x638>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00d      	beq.n	8002390 <HAL_GPIO_Init+0x52c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a4a      	ldr	r2, [pc, #296]	; (80024a0 <HAL_GPIO_Init+0x63c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x528>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x640>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_GPIO_Init+0x524>
 8002384:	2306      	movs	r3, #6
 8002386:	e00c      	b.n	80023a2 <HAL_GPIO_Init+0x53e>
 8002388:	2307      	movs	r3, #7
 800238a:	e00a      	b.n	80023a2 <HAL_GPIO_Init+0x53e>
 800238c:	2305      	movs	r3, #5
 800238e:	e008      	b.n	80023a2 <HAL_GPIO_Init+0x53e>
 8002390:	2304      	movs	r3, #4
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x53e>
 8002394:	2303      	movs	r3, #3
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_Init+0x53e>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x53e>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_Init+0x53e>
 80023a0:	2300      	movs	r3, #0
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b2:	4935      	ldr	r1, [pc, #212]	; (8002488 <HAL_GPIO_Init+0x624>)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_GPIO_Init+0x644>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e4:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <HAL_GPIO_Init+0x644>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_GPIO_Init+0x644>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800240e:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x644>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <HAL_GPIO_Init+0x644>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_GPIO_Init+0x644>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_GPIO_Init+0x644>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002462:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_GPIO_Init+0x644>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3301      	adds	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	f67f ad85 	bls.w	8001f80 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	08003794 	.word	0x08003794
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40021400 	.word	0x40021400
 80024a4:	40021800 	.word	0x40021800
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80024bc:	887b      	ldrh	r3, [r7, #2]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_GPIO_WritePin+0x20>
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_GPIO_WritePin+0x2a>
 80024cc:	f240 119d 	movw	r1, #413	; 0x19d
 80024d0:	480e      	ldr	r0, [pc, #56]	; (800250c <HAL_GPIO_WritePin+0x60>)
 80024d2:	f7fe fd0e 	bl	8000ef2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024d6:	787b      	ldrb	r3, [r7, #1]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_WritePin+0x40>
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d004      	beq.n	80024ec <HAL_GPIO_WritePin+0x40>
 80024e2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80024e6:	4809      	ldr	r0, [pc, #36]	; (800250c <HAL_GPIO_WritePin+0x60>)
 80024e8:	f7fe fd03 	bl	8000ef2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f8:	e003      	b.n	8002502 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	041a      	lsls	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	619a      	str	r2, [r3, #24]
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	08003794 	.word	0x08003794

08002510 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800253c:	f7fe fde2 	bl	8001104 <HAL_GetTick>
 8002540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002542:	e009      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002544:	f7fe fdde 	bl	8001104 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002552:	d901      	bls.n	8002558 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e01f      	b.n	8002598 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d1ee      	bne.n	8002544 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800256c:	f7fe fdca 	bl	8001104 <HAL_GetTick>
 8002570:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002572:	e009      	b.n	8002588 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002574:	f7fe fdc6 	bl	8001104 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002582:	d901      	bls.n	8002588 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e007      	b.n	8002598 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002594:	d1ee      	bne.n	8002574 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800
 80025a4:	420e0040 	.word	0x420e0040
 80025a8:	40007000 	.word	0x40007000
 80025ac:	420e0044 	.word	0x420e0044

080025b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e18c      	b.n	80028de <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x24>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d904      	bls.n	80025de <HAL_RCC_ClockConfig+0x2e>
 80025d4:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80025d8:	4887      	ldr	r0, [pc, #540]	; (80027f8 <HAL_RCC_ClockConfig+0x248>)
 80025da:	f7fe fc8a 	bl	8000ef2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d031      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d02e      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d02b      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d028      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d025      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d022      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d01f      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b07      	cmp	r3, #7
 800260c:	d01c      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d019      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b09      	cmp	r3, #9
 8002618:	d016      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b0a      	cmp	r3, #10
 800261e:	d013      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b0b      	cmp	r3, #11
 8002624:	d010      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d00d      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d00a      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b0e      	cmp	r3, #14
 8002636:	d007      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	d004      	beq.n	8002648 <HAL_RCC_ClockConfig+0x98>
 800263e:	f240 215d 	movw	r1, #605	; 0x25d
 8002642:	486d      	ldr	r0, [pc, #436]	; (80027f8 <HAL_RCC_ClockConfig+0x248>)
 8002644:	f7fe fc55 	bl	8000ef2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <HAL_RCC_ClockConfig+0x24c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d90c      	bls.n	8002670 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b69      	ldr	r3, [pc, #420]	; (80027fc <HAL_RCC_ClockConfig+0x24c>)
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_ClockConfig+0x24c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e136      	b.n	80028de <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d049      	beq.n	8002710 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a5c      	ldr	r2, [pc, #368]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 800268e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b57      	ldr	r3, [pc, #348]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a56      	ldr	r2, [pc, #344]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 80026a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d024      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b90      	cmp	r3, #144	; 0x90
 80026c2:	d01c      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2ba0      	cmp	r3, #160	; 0xa0
 80026ca:	d018      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2bb0      	cmp	r3, #176	; 0xb0
 80026d2:	d014      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2bc0      	cmp	r3, #192	; 0xc0
 80026da:	d010      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2bd0      	cmp	r3, #208	; 0xd0
 80026e2:	d00c      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2be0      	cmp	r3, #224	; 0xe0
 80026ea:	d008      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2bf0      	cmp	r3, #240	; 0xf0
 80026f2:	d004      	beq.n	80026fe <HAL_RCC_ClockConfig+0x14e>
 80026f4:	f44f 7120 	mov.w	r1, #640	; 0x280
 80026f8:	483f      	ldr	r0, [pc, #252]	; (80027f8 <HAL_RCC_ClockConfig+0x248>)
 80026fa:	f7fe fbfa 	bl	8000ef2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	493d      	ldr	r1, [pc, #244]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d059      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <HAL_RCC_ClockConfig+0x196>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d00c      	beq.n	8002746 <HAL_RCC_ClockConfig+0x196>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d008      	beq.n	8002746 <HAL_RCC_ClockConfig+0x196>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d004      	beq.n	8002746 <HAL_RCC_ClockConfig+0x196>
 800273c:	f240 2187 	movw	r1, #647	; 0x287
 8002740:	482d      	ldr	r0, [pc, #180]	; (80027f8 <HAL_RCC_ClockConfig+0x248>)
 8002742:	f7fe fbd6 	bl	8000ef2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d119      	bne.n	800278e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0bf      	b.n	80028de <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276a:	2b03      	cmp	r3, #3
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0af      	b.n	80028de <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0a7      	b.n	80028de <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4919      	ldr	r1, [pc, #100]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7fe fcb0 	bl	8001104 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe fcac 	bl	8001104 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e08f      	b.n	80028de <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_RCC_ClockConfig+0x250>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x24c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d212      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_RCC_ClockConfig+0x24c>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_ClockConfig+0x24c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d007      	beq.n	8002804 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e072      	b.n	80028de <HAL_RCC_ClockConfig+0x32e>
 80027f8:	080037d0 	.word	0x080037d0
 80027fc:	40023c00 	.word	0x40023c00
 8002800:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d025      	beq.n	800285c <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <HAL_RCC_ClockConfig+0x29a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	d013      	beq.n	800284a <HAL_RCC_ClockConfig+0x29a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800282a:	d00e      	beq.n	800284a <HAL_RCC_ClockConfig+0x29a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x29a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800283e:	d004      	beq.n	800284a <HAL_RCC_ClockConfig+0x29a>
 8002840:	f240 21c5 	movw	r1, #709	; 0x2c5
 8002844:	4828      	ldr	r0, [pc, #160]	; (80028e8 <HAL_RCC_ClockConfig+0x338>)
 8002846:	f7fe fb54 	bl	8000ef2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284a:	4b28      	ldr	r3, [pc, #160]	; (80028ec <HAL_RCC_ClockConfig+0x33c>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4925      	ldr	r1, [pc, #148]	; (80028ec <HAL_RCC_ClockConfig+0x33c>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d026      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d018      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x2f2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002878:	d013      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x2f2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002882:	d00e      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x2f2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x2f2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002896:	d004      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x2f2>
 8002898:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800289c:	4812      	ldr	r0, [pc, #72]	; (80028e8 <HAL_RCC_ClockConfig+0x338>)
 800289e:	f7fe fb28 	bl	8000ef2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCC_ClockConfig+0x33c>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	490e      	ldr	r1, [pc, #56]	; (80028ec <HAL_RCC_ClockConfig+0x33c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b6:	f000 f821 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_ClockConfig+0x33c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	490a      	ldr	r1, [pc, #40]	; (80028f0 <HAL_RCC_ClockConfig+0x340>)
 80028c8:	5ccb      	ldrb	r3, [r1, r3]
 80028ca:	fa22 f303 	lsr.w	r3, r2, r3
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x344>)
 80028d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x348>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fbd0 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	080037d0 	.word	0x080037d0
 80028ec:	40023800 	.word	0x40023800
 80028f0:	0800389c 	.word	0x0800389c
 80028f4:	20000004 	.word	0x20000004
 80028f8:	20000008 	.word	0x20000008

080028fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002918:	4bce      	ldr	r3, [pc, #824]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b0c      	cmp	r3, #12
 8002922:	f200 818d 	bhi.w	8002c40 <HAL_RCC_GetSysClockFreq+0x344>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_RCC_GetSysClockFreq+0x30>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08002961 	.word	0x08002961
 8002930:	08002c41 	.word	0x08002c41
 8002934:	08002c41 	.word	0x08002c41
 8002938:	08002c41 	.word	0x08002c41
 800293c:	08002967 	.word	0x08002967
 8002940:	08002c41 	.word	0x08002c41
 8002944:	08002c41 	.word	0x08002c41
 8002948:	08002c41 	.word	0x08002c41
 800294c:	0800296d 	.word	0x0800296d
 8002950:	08002c41 	.word	0x08002c41
 8002954:	08002c41 	.word	0x08002c41
 8002958:	08002c41 	.word	0x08002c41
 800295c:	08002ae1 	.word	0x08002ae1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4bbd      	ldr	r3, [pc, #756]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002962:	61bb      	str	r3, [r7, #24]
       break;
 8002964:	e16f      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002966:	4bbd      	ldr	r3, [pc, #756]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x360>)
 8002968:	61bb      	str	r3, [r7, #24]
      break;
 800296a:	e16c      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800296c:	4bb9      	ldr	r3, [pc, #740]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002974:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002976:	4bb7      	ldr	r3, [pc, #732]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d053      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002982:	4bb4      	ldr	r3, [pc, #720]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	461a      	mov	r2, r3
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	ea02 0400 	and.w	r4, r2, r0
 800299a:	603c      	str	r4, [r7, #0]
 800299c:	400b      	ands	r3, r1
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a4:	4620      	mov	r0, r4
 80029a6:	4629      	mov	r1, r5
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	014b      	lsls	r3, r1, #5
 80029b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029b6:	0142      	lsls	r2, r0, #5
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	4623      	mov	r3, r4
 80029be:	1ac0      	subs	r0, r0, r3
 80029c0:	462b      	mov	r3, r5
 80029c2:	eb61 0103 	sbc.w	r1, r1, r3
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	018b      	lsls	r3, r1, #6
 80029d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029d4:	0182      	lsls	r2, r0, #6
 80029d6:	1a12      	subs	r2, r2, r0
 80029d8:	eb63 0301 	sbc.w	r3, r3, r1
 80029dc:	f04f 0000 	mov.w	r0, #0
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	00d9      	lsls	r1, r3, #3
 80029e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ea:	00d0      	lsls	r0, r2, #3
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4621      	mov	r1, r4
 80029f2:	1852      	adds	r2, r2, r1
 80029f4:	4629      	mov	r1, r5
 80029f6:	eb43 0101 	adc.w	r1, r3, r1
 80029fa:	460b      	mov	r3, r1
 80029fc:	f04f 0000 	mov.w	r0, #0
 8002a00:	f04f 0100 	mov.w	r1, #0
 8002a04:	0259      	lsls	r1, r3, #9
 8002a06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a0a:	0250      	lsls	r0, r2, #9
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	f7fd fbf2 	bl	8000204 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4613      	mov	r3, r2
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	e04c      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2a:	4b8a      	ldr	r3, [pc, #552]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	099b      	lsrs	r3, r3, #6
 8002a30:	461a      	mov	r2, r3
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	ea02 0a00 	and.w	sl, r2, r0
 8002a42:	ea03 0b01 	and.w	fp, r3, r1
 8002a46:	4650      	mov	r0, sl
 8002a48:	4659      	mov	r1, fp
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	014b      	lsls	r3, r1, #5
 8002a54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a58:	0142      	lsls	r2, r0, #5
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	ebb0 000a 	subs.w	r0, r0, sl
 8002a62:	eb61 010b 	sbc.w	r1, r1, fp
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	018b      	lsls	r3, r1, #6
 8002a70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a74:	0182      	lsls	r2, r0, #6
 8002a76:	1a12      	subs	r2, r2, r0
 8002a78:	eb63 0301 	sbc.w	r3, r3, r1
 8002a7c:	f04f 0000 	mov.w	r0, #0
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	00d9      	lsls	r1, r3, #3
 8002a86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a8a:	00d0      	lsls	r0, r2, #3
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	eb12 020a 	adds.w	r2, r2, sl
 8002a94:	eb43 030b 	adc.w	r3, r3, fp
 8002a98:	f04f 0000 	mov.w	r0, #0
 8002a9c:	f04f 0100 	mov.w	r1, #0
 8002aa0:	0299      	lsls	r1, r3, #10
 8002aa2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aa6:	0290      	lsls	r0, r2, #10
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	f7fd fba4 	bl	8000204 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac4:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	61bb      	str	r3, [r7, #24]
      break;
 8002ade:	e0b2      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae0:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aea:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d04d      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af6:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	461a      	mov	r2, r3
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	ea02 0800 	and.w	r8, r2, r0
 8002b0e:	ea03 0901 	and.w	r9, r3, r1
 8002b12:	4640      	mov	r0, r8
 8002b14:	4649      	mov	r1, r9
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	014b      	lsls	r3, r1, #5
 8002b20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b24:	0142      	lsls	r2, r0, #5
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b2e:	eb61 0109 	sbc.w	r1, r1, r9
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	018b      	lsls	r3, r1, #6
 8002b3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b40:	0182      	lsls	r2, r0, #6
 8002b42:	1a12      	subs	r2, r2, r0
 8002b44:	eb63 0301 	sbc.w	r3, r3, r1
 8002b48:	f04f 0000 	mov.w	r0, #0
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	00d9      	lsls	r1, r3, #3
 8002b52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b56:	00d0      	lsls	r0, r2, #3
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	eb12 0208 	adds.w	r2, r2, r8
 8002b60:	eb43 0309 	adc.w	r3, r3, r9
 8002b64:	f04f 0000 	mov.w	r0, #0
 8002b68:	f04f 0100 	mov.w	r1, #0
 8002b6c:	0259      	lsls	r1, r3, #9
 8002b6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b72:	0250      	lsls	r0, r2, #9
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	f7fd fb3e 	bl	8000204 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	e04a      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	ea02 0400 	and.w	r4, r2, r0
 8002baa:	ea03 0501 	and.w	r5, r3, r1
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	014b      	lsls	r3, r1, #5
 8002bbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bc0:	0142      	lsls	r2, r0, #5
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	1b00      	subs	r0, r0, r4
 8002bc8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	018b      	lsls	r3, r1, #6
 8002bd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bda:	0182      	lsls	r2, r0, #6
 8002bdc:	1a12      	subs	r2, r2, r0
 8002bde:	eb63 0301 	sbc.w	r3, r3, r1
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	00d9      	lsls	r1, r3, #3
 8002bec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bf0:	00d0      	lsls	r0, r2, #3
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	1912      	adds	r2, r2, r4
 8002bf8:	eb45 0303 	adc.w	r3, r5, r3
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	0299      	lsls	r1, r3, #10
 8002c06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c0a:	0290      	lsls	r0, r2, #10
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	f7fd faf2 	bl	8000204 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0f1b      	lsrs	r3, r3, #28
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	61bb      	str	r3, [r7, #24]
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c42:	61bb      	str	r3, [r7, #24]
      break;
 8002c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c46:	69bb      	ldr	r3, [r7, #24]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	007a1200 	.word	0x007a1200

08002c60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e34b      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	d904      	bls.n	8002c84 <HAL_RCC_OscConfig+0x24>
 8002c7a:	f640 5112 	movw	r1, #3346	; 0xd12
 8002c7e:	48a5      	ldr	r0, [pc, #660]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002c80:	f7fe f937 	bl	8000ef2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8096 	beq.w	8002dbe <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x58>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x58>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cac:	d004      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x58>
 8002cae:	f640 5117 	movw	r1, #3351	; 0xd17
 8002cb2:	4898      	ldr	r0, [pc, #608]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002cb4:	f7fe f91d 	bl	8000ef2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cb8:	4b97      	ldr	r3, [pc, #604]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d019      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cc4:	4b94      	ldr	r3, [pc, #592]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cd0:	4b91      	ldr	r3, [pc, #580]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b8e      	ldr	r3, [pc, #568]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d112      	bne.n	8002d10 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cea:	4b8b      	ldr	r3, [pc, #556]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	4b87      	ldr	r3, [pc, #540]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d05b      	beq.n	8002dbc <HAL_RCC_OscConfig+0x15c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d157      	bne.n	8002dbc <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e2fc      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0xc8>
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7e      	ldr	r2, [pc, #504]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e01d      	b.n	8002d64 <HAL_RCC_OscConfig+0x104>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0xec>
 8002d32:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a78      	ldr	r2, [pc, #480]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b76      	ldr	r3, [pc, #472]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a75      	ldr	r2, [pc, #468]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0x104>
 8002d4c:	4b72      	ldr	r3, [pc, #456]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a71      	ldr	r2, [pc, #452]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f9ca 	bl	8001104 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe f9c6 	bl	8001104 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e2c1      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b64      	ldr	r3, [pc, #400]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x114>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe f9b6 	bl	8001104 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe f9b2 	bl	8001104 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e2ad      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	4b5a      	ldr	r3, [pc, #360]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x13c>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8086 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCC_OscConfig+0x186>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d004      	beq.n	8002de6 <HAL_RCC_OscConfig+0x186>
 8002ddc:	f640 514f 	movw	r1, #3407	; 0xd4f
 8002de0:	484c      	ldr	r0, [pc, #304]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002de2:	f7fe f886 	bl	8000ef2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b1f      	cmp	r3, #31
 8002dec:	d904      	bls.n	8002df8 <HAL_RCC_OscConfig+0x198>
 8002dee:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 8002df2:	4848      	ldr	r0, [pc, #288]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002df4:	f7fe f87d 	bl	8000ef2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002df8:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e04:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e10:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1c:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	d11c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e28:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e34:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1ec>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e25e      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	492f      	ldr	r1, [pc, #188]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e60:	e03a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d020      	beq.n	8002eac <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <HAL_RCC_OscConfig+0x2bc>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe f948 	bl	8001104 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e78:	f7fe f944 	bl	8001104 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e23f      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8a:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	491c      	ldr	r1, [pc, #112]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
 8002eaa:	e015      	b.n	8002ed8 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eac:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x2bc>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe f927 	bl	8001104 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eba:	f7fe f923 	bl	8001104 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e21e      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d045      	beq.n	8002f70 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_OscConfig+0x29e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d004      	beq.n	8002efe <HAL_RCC_OscConfig+0x29e>
 8002ef4:	f640 5196 	movw	r1, #3478	; 0xd96
 8002ef8:	4806      	ldr	r0, [pc, #24]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002efa:	f7fd fffa 	bl	8000ef2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01e      	beq.n	8002f44 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_OscConfig+0x2c0>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe f8fa 	bl	8001104 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	e010      	b.n	8002f36 <HAL_RCC_OscConfig+0x2d6>
 8002f14:	08003808 	.word	0x08003808
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	42470000 	.word	0x42470000
 8002f20:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe f8ee 	bl	8001104 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1e9      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4ba4      	ldr	r3, [pc, #656]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x2c4>
 8002f42:	e015      	b.n	8002f70 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	4ba1      	ldr	r3, [pc, #644]	; (80031cc <HAL_RCC_OscConfig+0x56c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f8db 	bl	8001104 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe f8d7 	bl	8001104 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1d2      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b98      	ldr	r3, [pc, #608]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8002f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a8 	beq.w	80030ce <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x344>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x344>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d004      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x344>
 8002f9a:	f640 51c2 	movw	r1, #3522	; 0xdc2
 8002f9e:	488c      	ldr	r0, [pc, #560]	; (80031d0 <HAL_RCC_OscConfig+0x570>)
 8002fa0:	f7fd ffa7 	bl	8000ef2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa4:	4b88      	ldr	r3, [pc, #544]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	4b84      	ldr	r3, [pc, #528]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4a83      	ldr	r2, [pc, #524]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc0:	4b81      	ldr	r3, [pc, #516]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b80      	ldr	r3, [pc, #512]	; (80031d4 <HAL_RCC_OscConfig+0x574>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d118      	bne.n	800300e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fdc:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <HAL_RCC_OscConfig+0x574>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a7c      	ldr	r2, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x574>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe f88c 	bl	8001104 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fe f888 	bl	8001104 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e183      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b74      	ldr	r3, [pc, #464]	; (80031d4 <HAL_RCC_OscConfig+0x574>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x3c4>
 8003016:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a6b      	ldr	r2, [pc, #428]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	e01c      	b.n	800305e <HAL_RCC_OscConfig+0x3fe>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d10c      	bne.n	8003046 <HAL_RCC_OscConfig+0x3e6>
 800302c:	4b66      	ldr	r3, [pc, #408]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a65      	ldr	r2, [pc, #404]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a62      	ldr	r2, [pc, #392]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	e00b      	b.n	800305e <HAL_RCC_OscConfig+0x3fe>
 8003046:	4b60      	ldr	r3, [pc, #384]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a5f      	ldr	r2, [pc, #380]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
 8003052:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a5c      	ldr	r2, [pc, #368]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d015      	beq.n	8003092 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fe f84d 	bl	8001104 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe f849 	bl	8001104 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e142      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	4b50      	ldr	r3, [pc, #320]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0ee      	beq.n	800306e <HAL_RCC_OscConfig+0x40e>
 8003090:	e014      	b.n	80030bc <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003092:	f7fe f837 	bl	8001104 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fe f833 	bl	8001104 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e12c      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b0:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ee      	bne.n	800309a <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a40      	ldr	r2, [pc, #256]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 80030c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x490>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d008      	beq.n	80030f0 <HAL_RCC_OscConfig+0x490>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d004      	beq.n	80030f0 <HAL_RCC_OscConfig+0x490>
 80030e6:	f640 6105 	movw	r1, #3589	; 0xe05
 80030ea:	4839      	ldr	r0, [pc, #228]	; (80031d0 <HAL_RCC_OscConfig+0x570>)
 80030ec:	f7fd ff01 	bl	8000ef2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8107 	beq.w	8003308 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	f000 80c0 	beq.w	8003288 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b02      	cmp	r3, #2
 800310e:	f040 80a4 	bne.w	800325a <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_OscConfig+0x4ce>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003122:	d004      	beq.n	800312e <HAL_RCC_OscConfig+0x4ce>
 8003124:	f640 610e 	movw	r1, #3598	; 0xe0e
 8003128:	4829      	ldr	r0, [pc, #164]	; (80031d0 <HAL_RCC_OscConfig+0x570>)
 800312a:	f7fd fee2 	bl	8000ef2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	2b3f      	cmp	r3, #63	; 0x3f
 8003134:	d904      	bls.n	8003140 <HAL_RCC_OscConfig+0x4e0>
 8003136:	f640 610f 	movw	r1, #3599	; 0xe0f
 800313a:	4825      	ldr	r0, [pc, #148]	; (80031d0 <HAL_RCC_OscConfig+0x570>)
 800313c:	f7fd fed9 	bl	8000ef2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b31      	cmp	r3, #49	; 0x31
 8003146:	d904      	bls.n	8003152 <HAL_RCC_OscConfig+0x4f2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003150:	d904      	bls.n	800315c <HAL_RCC_OscConfig+0x4fc>
 8003152:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003156:	481e      	ldr	r0, [pc, #120]	; (80031d0 <HAL_RCC_OscConfig+0x570>)
 8003158:	f7fd fecb 	bl	8000ef2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2b02      	cmp	r3, #2
 8003162:	d010      	beq.n	8003186 <HAL_RCC_OscConfig+0x526>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2b04      	cmp	r3, #4
 800316a:	d00c      	beq.n	8003186 <HAL_RCC_OscConfig+0x526>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	2b06      	cmp	r3, #6
 8003172:	d008      	beq.n	8003186 <HAL_RCC_OscConfig+0x526>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	2b08      	cmp	r3, #8
 800317a:	d004      	beq.n	8003186 <HAL_RCC_OscConfig+0x526>
 800317c:	f640 6111 	movw	r1, #3601	; 0xe11
 8003180:	4813      	ldr	r0, [pc, #76]	; (80031d0 <HAL_RCC_OscConfig+0x570>)
 8003182:	f7fd feb6 	bl	8000ef2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d903      	bls.n	8003196 <HAL_RCC_OscConfig+0x536>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d904      	bls.n	80031a0 <HAL_RCC_OscConfig+0x540>
 8003196:	f640 6112 	movw	r1, #3602	; 0xe12
 800319a:	480d      	ldr	r0, [pc, #52]	; (80031d0 <HAL_RCC_OscConfig+0x570>)
 800319c:	f7fd fea9 	bl	8000ef2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d903      	bls.n	80031b0 <HAL_RCC_OscConfig+0x550>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	2b07      	cmp	r3, #7
 80031ae:	d904      	bls.n	80031ba <HAL_RCC_OscConfig+0x55a>
 80031b0:	f640 6113 	movw	r1, #3603	; 0xe13
 80031b4:	4806      	ldr	r0, [pc, #24]	; (80031d0 <HAL_RCC_OscConfig+0x570>)
 80031b6:	f7fd fe9c 	bl	8000ef2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_RCC_OscConfig+0x578>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd ffa0 	bl	8001104 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	e012      	b.n	80031ee <HAL_RCC_OscConfig+0x58e>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	42470e80 	.word	0x42470e80
 80031d0:	08003808 	.word	0x08003808
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd ff92 	bl	8001104 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e08d      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	4b49      	ldr	r3, [pc, #292]	; (8003314 <HAL_RCC_OscConfig+0x6b4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	071b      	lsls	r3, r3, #28
 8003226:	493b      	ldr	r1, [pc, #236]	; (8003314 <HAL_RCC_OscConfig+0x6b4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <HAL_RCC_OscConfig+0x6b8>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fd ff67 	bl	8001104 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fd ff63 	bl	8001104 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05e      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_OscConfig+0x6b4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x5da>
 8003258:	e056      	b.n	8003308 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_RCC_OscConfig+0x6b8>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fd ff50 	bl	8001104 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fd ff4c 	bl	8001104 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e047      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_RCC_OscConfig+0x6b4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x608>
 8003286:	e03f      	b.n	8003308 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e03a      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <HAL_RCC_OscConfig+0x6b4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d030      	beq.n	8003304 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d129      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d122      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d119      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	3b01      	subs	r3, #1
 80032de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d10f      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	42470060 	.word	0x42470060

0800331c <CMN_PortEnableClock>:
/**
 * @brief Enable GPIO clock
 * @param port Port to be enabled
 */
void CMN_PortEnableClock(GPIO_TypeDef *port)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(port));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a5f      	ldr	r2, [pc, #380]	; (80034a4 <CMN_PortEnableClock+0x188>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01f      	beq.n	800336c <CMN_PortEnableClock+0x50>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a5e      	ldr	r2, [pc, #376]	; (80034a8 <CMN_PortEnableClock+0x18c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d01b      	beq.n	800336c <CMN_PortEnableClock+0x50>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a5d      	ldr	r2, [pc, #372]	; (80034ac <CMN_PortEnableClock+0x190>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d017      	beq.n	800336c <CMN_PortEnableClock+0x50>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a5c      	ldr	r2, [pc, #368]	; (80034b0 <CMN_PortEnableClock+0x194>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <CMN_PortEnableClock+0x50>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a5b      	ldr	r2, [pc, #364]	; (80034b4 <CMN_PortEnableClock+0x198>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00f      	beq.n	800336c <CMN_PortEnableClock+0x50>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a5a      	ldr	r2, [pc, #360]	; (80034b8 <CMN_PortEnableClock+0x19c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <CMN_PortEnableClock+0x50>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a59      	ldr	r2, [pc, #356]	; (80034bc <CMN_PortEnableClock+0x1a0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <CMN_PortEnableClock+0x50>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <CMN_PortEnableClock+0x1a4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <CMN_PortEnableClock+0x50>
 8003364:	2143      	movs	r1, #67	; 0x43
 8003366:	4857      	ldr	r0, [pc, #348]	; (80034c4 <CMN_PortEnableClock+0x1a8>)
 8003368:	f7fd fdc3 	bl	8000ef2 <assert_failed>

  /* Enable appropriate GPIO clock */
  if (port == GPIOH)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <CMN_PortEnableClock+0x1a4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10e      	bne.n	8003392 <CMN_PortEnableClock+0x76>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 800337e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003382:	6313      	str	r3, [r2, #48]	; 0x30
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
  else if (port == GPIOB)
    __HAL_RCC_GPIOB_CLK_ENABLE();
  else if (port == GPIOA)
    __HAL_RCC_GPIOA_CLK_ENABLE();
}
 8003390:	e083      	b.n	800349a <CMN_PortEnableClock+0x17e>
  else if (port == GPIOG)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a49      	ldr	r2, [pc, #292]	; (80034bc <CMN_PortEnableClock+0x1a0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10e      	bne.n	80033b8 <CMN_PortEnableClock+0x9c>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
 800339e:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a49      	ldr	r2, [pc, #292]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
}
 80033b6:	e070      	b.n	800349a <CMN_PortEnableClock+0x17e>
  else if (port == GPIOF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3f      	ldr	r2, [pc, #252]	; (80034b8 <CMN_PortEnableClock+0x19c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10e      	bne.n	80033de <CMN_PortEnableClock+0xc2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	4a3f      	ldr	r2, [pc, #252]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033ca:	f043 0320 	orr.w	r3, r3, #32
 80033ce:	6313      	str	r3, [r2, #48]	; 0x30
 80033d0:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	69fb      	ldr	r3, [r7, #28]
}
 80033dc:	e05d      	b.n	800349a <CMN_PortEnableClock+0x17e>
  else if (port == GPIOE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <CMN_PortEnableClock+0x198>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10e      	bne.n	8003404 <CMN_PortEnableClock+0xe8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a36      	ldr	r2, [pc, #216]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	69bb      	ldr	r3, [r7, #24]
}
 8003402:	e04a      	b.n	800349a <CMN_PortEnableClock+0x17e>
  else if (port == GPIOD)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <CMN_PortEnableClock+0x194>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10e      	bne.n	800342a <CMN_PortEnableClock+0x10e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	6313      	str	r3, [r2, #48]	; 0x30
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
}
 8003428:	e037      	b.n	800349a <CMN_PortEnableClock+0x17e>
  else if (port == GPIOC)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <CMN_PortEnableClock+0x190>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10e      	bne.n	8003450 <CMN_PortEnableClock+0x134>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6313      	str	r3, [r2, #48]	; 0x30
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
}
 800344e:	e024      	b.n	800349a <CMN_PortEnableClock+0x17e>
  else if (port == GPIOB)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <CMN_PortEnableClock+0x18c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10e      	bne.n	8003476 <CMN_PortEnableClock+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003462:	f043 0302 	orr.w	r3, r3, #2
 8003466:	6313      	str	r3, [r2, #48]	; 0x30
 8003468:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	e011      	b.n	800349a <CMN_PortEnableClock+0x17e>
  else if (port == GPIOA)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <CMN_PortEnableClock+0x188>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10d      	bne.n	800349a <CMN_PortEnableClock+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <CMN_PortEnableClock+0x1ac>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
}
 800349a:	bf00      	nop
 800349c:	3728      	adds	r7, #40	; 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40020000 	.word	0x40020000
 80034a8:	40020400 	.word	0x40020400
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020c00 	.word	0x40020c00
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40021400 	.word	0x40021400
 80034bc:	40021800 	.word	0x40021800
 80034c0:	40021c00 	.word	0x40021c00
 80034c4:	08003844 	.word	0x08003844
 80034c8:	40023800 	.word	0x40023800

080034cc <LED_Init>:
 * @param port The GPIO port used
 * @param pin_num The GPIO pin number
 * @return HAL Status
 */
HAL_StatusTypeDef LED_Init(struct Led *led, GPIO_TypeDef *port, uint8_t pin_num)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	71fb      	strb	r3, [r7, #7]
  /* Check the structure handle allocation */
  if (led == NULL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <LED_Init+0x18>
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e069      	b.n	80035b8 <LED_Init+0xec>
  if (pin_num >= GPIO_PIN_CNT) {
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	d901      	bls.n	80034ee <LED_Init+0x22>
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e064      	b.n	80035b8 <LED_Init+0xec>
  }

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(port));
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4a33      	ldr	r2, [pc, #204]	; (80035c0 <LED_Init+0xf4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01f      	beq.n	8003536 <LED_Init+0x6a>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4a32      	ldr	r2, [pc, #200]	; (80035c4 <LED_Init+0xf8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01b      	beq.n	8003536 <LED_Init+0x6a>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4a31      	ldr	r2, [pc, #196]	; (80035c8 <LED_Init+0xfc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d017      	beq.n	8003536 <LED_Init+0x6a>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <LED_Init+0x100>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <LED_Init+0x6a>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a2f      	ldr	r2, [pc, #188]	; (80035d0 <LED_Init+0x104>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00f      	beq.n	8003536 <LED_Init+0x6a>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4a2e      	ldr	r2, [pc, #184]	; (80035d4 <LED_Init+0x108>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00b      	beq.n	8003536 <LED_Init+0x6a>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <LED_Init+0x10c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d007      	beq.n	8003536 <LED_Init+0x6a>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4a2c      	ldr	r2, [pc, #176]	; (80035dc <LED_Init+0x110>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <LED_Init+0x6a>
 800352e:	211c      	movs	r1, #28
 8003530:	482b      	ldr	r0, [pc, #172]	; (80035e0 <LED_Init+0x114>)
 8003532:	f7fd fcde 	bl	8000ef2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_PIN(pin_num)));
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	2201      	movs	r2, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <LED_Init+0x88>
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	2201      	movs	r2, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <LED_Init+0x90>
 8003554:	211d      	movs	r1, #29
 8003556:	4822      	ldr	r0, [pc, #136]	; (80035e0 <LED_Init+0x114>)
 8003558:	f7fd fccb 	bl	8000ef2 <assert_failed>

  /* Initialize properties */
  led->Lock = HAL_UNLOCKED;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
  led->port = port;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	605a      	str	r2, [r3, #4]
  led->pin_num = pin_num;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	79fa      	ldrb	r2, [r7, #7]
 800356c:	771a      	strb	r2, [r3, #28]

  /* Enable the GPIO Clock */
  CMN_PortEnableClock(port);
 800356e:	68b8      	ldr	r0, [r7, #8]
 8003570:	f7ff fed4 	bl	800331c <CMN_PortEnableClock>

  /* Configure the GPIO pin */
  led->init.Pin = GPIO_PIN(led->pin_num);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	7f1b      	ldrb	r3, [r3, #28]
 8003578:	461a      	mov	r2, r3
 800357a:	2301      	movs	r3, #1
 800357c:	4093      	lsls	r3, r2
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	609a      	str	r2, [r3, #8]
  led->init.Mode = GPIO_MODE_OUTPUT_PP;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	60da      	str	r2, [r3, #12]
  led->init.Pull = GPIO_NOPULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	611a      	str	r2, [r3, #16]
  led->init.Speed = GPIO_SPEED_FAST;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2202      	movs	r2, #2
 8003594:	615a      	str	r2, [r3, #20]
  HAL_GPIO_Init(led->port, &led->init);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3308      	adds	r3, #8
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f7fe fc5f 	bl	8001e64 <HAL_GPIO_Init>

  LED_SetActiveMode(led, LED_ACTIVE_HIGH);
 80035a6:	2101      	movs	r1, #1
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f81b 	bl	80035e4 <LED_SetActiveMode>
  LED_Write(led, GPIO_PIN_RESET);
 80035ae:	2100      	movs	r1, #0
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f833 	bl	800361c <LED_Write>
  return (HAL_OK);
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40020000 	.word	0x40020000
 80035c4:	40020400 	.word	0x40020400
 80035c8:	40020800 	.word	0x40020800
 80035cc:	40020c00 	.word	0x40020c00
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40021400 	.word	0x40021400
 80035d8:	40021800 	.word	0x40021800
 80035dc:	40021c00 	.word	0x40021c00
 80035e0:	08003870 	.word	0x08003870

080035e4 <LED_SetActiveMode>:
 * @param led Pointer to Led handle
 * @param state The new mode
 * @return HAL Status
 */
HAL_StatusTypeDef LED_SetActiveMode(struct Led *led, enum LedActiveMode mode)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(led);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <LED_SetActiveMode+0x18>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e009      	b.n	8003610 <LED_SetActiveMode+0x2c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
  led->active_mode = mode;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	775a      	strb	r2, [r3, #29]
  __HAL_UNLOCK(led);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]

  return (HAL_OK);
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LED_Write>:
 * @param led Pointer to Led handle
 * @param state The new led state
 * @return HAL Status
 */
HAL_StatusTypeDef LED_Write(struct Led *led, GPIO_PinState state)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(led);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <LED_Write+0x18>
 8003630:	2302      	movs	r3, #2
 8003632:	e01d      	b.n	8003670 <LED_Write+0x54>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
  /* Check active mode */
  if (led->active_mode == LED_ACTIVE_LOW) {
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7f5b      	ldrb	r3, [r3, #29]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <LED_Write+0x34>
    state = !state;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	70fb      	strb	r3, [r7, #3]
  }
  /* Write the new state */
  HAL_GPIO_WritePin(led->port, GPIO_PIN(led->pin_num), state);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6858      	ldr	r0, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7f1b      	ldrb	r3, [r3, #28]
 8003658:	461a      	mov	r2, r3
 800365a:	2301      	movs	r3, #1
 800365c:	4093      	lsls	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	4619      	mov	r1, r3
 8003664:	f7fe ff22 	bl	80024ac <HAL_GPIO_WritePin>
  __HAL_UNLOCK(led);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]

  return (HAL_OK);
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	; (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	; (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	; (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	; (80036bc <__libc_init_array+0x44>)
 800368c:	f000 f83c 	bl	8003708 <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	080038bc 	.word	0x080038bc
 80036b4:	080038bc 	.word	0x080038bc
 80036b8:	080038bc 	.word	0x080038bc
 80036bc:	080038c0 	.word	0x080038c0

080036c0 <memcmp>:
 80036c0:	b530      	push	{r4, r5, lr}
 80036c2:	3901      	subs	r1, #1
 80036c4:	2400      	movs	r4, #0
 80036c6:	42a2      	cmp	r2, r4
 80036c8:	d101      	bne.n	80036ce <memcmp+0xe>
 80036ca:	2000      	movs	r0, #0
 80036cc:	e005      	b.n	80036da <memcmp+0x1a>
 80036ce:	5d03      	ldrb	r3, [r0, r4]
 80036d0:	3401      	adds	r4, #1
 80036d2:	5d0d      	ldrb	r5, [r1, r4]
 80036d4:	42ab      	cmp	r3, r5
 80036d6:	d0f6      	beq.n	80036c6 <memcmp+0x6>
 80036d8:	1b58      	subs	r0, r3, r5
 80036da:	bd30      	pop	{r4, r5, pc}

080036dc <memcpy>:
 80036dc:	440a      	add	r2, r1
 80036de:	4291      	cmp	r1, r2
 80036e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80036e4:	d100      	bne.n	80036e8 <memcpy+0xc>
 80036e6:	4770      	bx	lr
 80036e8:	b510      	push	{r4, lr}
 80036ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036f2:	4291      	cmp	r1, r2
 80036f4:	d1f9      	bne.n	80036ea <memcpy+0xe>
 80036f6:	bd10      	pop	{r4, pc}

080036f8 <memset>:
 80036f8:	4402      	add	r2, r0
 80036fa:	4603      	mov	r3, r0
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d100      	bne.n	8003702 <memset+0xa>
 8003700:	4770      	bx	lr
 8003702:	f803 1b01 	strb.w	r1, [r3], #1
 8003706:	e7f9      	b.n	80036fc <memset+0x4>

08003708 <_init>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	bf00      	nop
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr

08003714 <_fini>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr
